{"ast":null,"code":"var _jsxFileName = \"/Users/gabrielbundala/Desktop/crown-clothing2/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport HomePage from './pages/homepage/homepage.component';\nimport Header from './components/header/header.component';\nimport ShopPage from './pages/shop/shop.component';\nimport SignInAndSignUpPage from './pages/sign-in-and-sign-up/sign-in-and-sign-up.component';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { auth, createUserProfileDocument } from './firebase/firebase.utils';\nimport { connect } from 'react-redux';\nimport { setCurrentUser } from './redux/user/user.actions';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.unsubscribeFromAuth = null;\n  }\n\n  componentDidMount() {\n    const {\n      setCurrentUser\n    } = this.props; //below is an open subscription which is basically an open\n    //messaging system btn our App and our FirebaseApp.\n    //We don't have to fetch everytime our component mounts \n    //as long as the user session is still on it connects automatically.\n\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n      if (userAuth) {\n        const userRef = await createUserProfileDocument(userAuth); //below we use this.props.setCurrentUser inplace of this.setState\n        //as we no longer have the constructor. Note: this.props is destructured above!\n\n        userRef.onSnapshot(snapShot => {\n          setCurrentUser({\n            id: snapShot.id,\n            ...snapShot.data() //STUDYME!\n\n          });\n        });\n      }\n\n      setCurrentUser(userAuth);\n    });\n  } //as we don't want to have any memory leaks in our app,\n  //the subscription will close when the component unmounts\n\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: HomePage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/shop\",\n      component: ShopPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/signin\",\n      render: () => this.props.currentUser ? /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }\n      }) : /*#__PURE__*/React.createElement(SignInAndSignUpPage, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\n;\n\nconst mapStateToProps = ({\n  user\n}) => ({\n  currentUser: user.currentUser //we get access to this.props.currrentUser after putting into connect below\n\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setCurrentUser: user => dispatch(setCurrentUser(user))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App); //connect has two arguments\n//mapDispatchToProps is the second argument \n//we have put the first argument to null as we dont need \n//mapStateToProps in Appjs as there is no where in here\n//that we have used the state of the current user\n//hence what we only need here is to send the update of the state\n//to the 'user.actions.js'\n//we dont need the constructor anymore, hence we have remove it!\n//UPDATE: Initially we had null as the first argument in connect()\n//but since we have implemented React Router Redirect to have \n//the app remove the signIn page after use signs in we have \n//therefore needed state in the Appjs file there the \n//mapStateToProp function and implementation.","map":{"version":3,"sources":["/Users/gabrielbundala/Desktop/crown-clothing2/src/App.js"],"names":["React","Component","HomePage","Header","ShopPage","SignInAndSignUpPage","Route","Switch","Redirect","auth","createUserProfileDocument","connect","setCurrentUser","App","unsubscribeFromAuth","componentDidMount","props","onAuthStateChanged","userAuth","userRef","onSnapshot","snapShot","id","data","componentWillUnmount","render","currentUser","mapStateToProps","user","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport './App.css';\nimport HomePage from './pages/homepage/homepage.component';\nimport Header from './components/header/header.component';\nimport ShopPage from './pages/shop/shop.component';\nimport SignInAndSignUpPage from './pages/sign-in-and-sign-up/sign-in-and-sign-up.component';\n\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { auth, createUserProfileDocument } from './firebase/firebase.utils';\nimport { connect } from 'react-redux';\nimport { setCurrentUser } from './redux/user/user.actions';\n\nclass App extends Component {\n\n  unsubscribeFromAuth = null;\n\n  componentDidMount() {\n    const { setCurrentUser } = this.props\n    //below is an open subscription which is basically an open\n    //messaging system btn our App and our FirebaseApp.\n    //We don't have to fetch everytime our component mounts \n    //as long as the user session is still on it connects automatically.\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n      if (userAuth) {\n        const userRef = await createUserProfileDocument(userAuth);\n\n        //below we use this.props.setCurrentUser inplace of this.setState\n        //as we no longer have the constructor. Note: this.props is destructured above!\n        userRef.onSnapshot(snapShot => {\n          setCurrentUser({\n            id: snapShot.id,\n            ...snapShot.data()//STUDYME!\n          });\n        });\n      } \n      \n      setCurrentUser(userAuth);\n      \n    });\n  }\n\n  //as we don't want to have any memory leaks in our app,\n  //the subscription will close when the component unmounts\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n  }\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <Switch>\n          <Route exact path='/' component={HomePage}/>\n          <Route path='/shop' component={ShopPage} />\n          <Route \n            exact \n            path='/signin' \n            render={() => \n              this.props.currentUser ? (\n                <Redirect to='/' />\n              ) : (\n                <SignInAndSignUpPage />\n              )\n            } \n          />\n        </Switch>\n      </div>\n    );\n  };\n};\n\nconst mapStateToProps = ({ user }) => ({\n  currentUser: user.currentUser//we get access to this.props.currrentUser after putting into connect below\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setCurrentUser: user => dispatch(setCurrentUser(user))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps )(App);\n\n//connect has two arguments\n//mapDispatchToProps is the second argument \n//we have put the first argument to null as we dont need \n//mapStateToProps in Appjs as there is no where in here\n//that we have used the state of the current user\n//hence what we only need here is to send the update of the state\n//to the 'user.actions.js'\n//we dont need the constructor anymore, hence we have remove it!\n//UPDATE: Initially we had null as the first argument in connect()\n//but since we have implemented React Router Redirect to have \n//the app remove the signIn page after use signs in we have \n//therefore needed state in the Appjs file there the \n//mapStateToProp function and implementation.\n"]},"metadata":{},"sourceType":"module"}