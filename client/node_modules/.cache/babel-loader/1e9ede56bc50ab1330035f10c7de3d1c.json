{"ast":null,"code":"import { all, call, takeLatest, put, select } from \"redux-saga/effects\";\nimport { addCartItemsCollectionAndDocuments, firestore, getCurrentUser } from \"../../firebase/firebase.utils\";\nimport { selectCurrentUser } from \"../user/user.selector\";\nimport UserActionTypes from \"../user/user.types\";\nimport { cartItemsStoreFailure, cartItemsStoreSuccess, clearCart } from \"./cart.actions\";\nimport { selectCartItems } from \"./cart.selectors\";\nimport { CartActionTypes } from \"./cart.types\"; //FUNCTION || ACTION SAGA (METHOD)\n\nexport function* clearCartOnSignOut() {\n  yield put(clearCart());\n} //CALLING THE FIREBASE METHOD TO STORE CART ITEMS IN FIREBASE\n//FIXME: Remove the console log here\n//FIXME: Find a way to put in the cartItemsStoreSuccess action - as in what do we to the client once we successfuly store to firebase -- maybe somekind of a redirect to another page\n\nexport function* storeCartItemsInFirebase() {\n  try {\n    const cartItems = yield select(selectCartItems);\n    const user = yield select(selectCurrentUser); // const userAuth = yield getCurrentUser();\n    // if (!userAuth) return; //if user never signed in, end session\n\n    if (!user) return;\n    yield call(addCartItemsCollectionAndDocuments, \"cartItems\", cartItems, user);\n    console.log(\"this saga has been called\"); // yield put(cartItemsStoreSuccess());\n    //plug into redux the state of the cartItems for the specific user from Firestore into the App -- UPDATE: we don't want to do this as it is irrelevant as data is already in redux store\n  } catch (error) {\n    yield put(cartItemsStoreFailure(error));\n  }\n} //ASYNC FUNC TO PULL CARTITEMS COLLECTION FROM FIRESTORE -- FOR RESPECTIVE SIGNED IN USER\n\nexport function* fetchCartCollectionAsync() {\n  try {\n    const user = yield select(selectCurrentUser);\n    const collectionRef = firestore.collection(`users/${user.id}/cartItems`);\n    const snapshot = yield collectionRef.get();\n    console.log(\"how does the pulled data from cartitems look like\", snapshot.docs); // const collectionsMap = yield call(\n    //   ,\n    //   snapshot\n    // );\n  } catch (error) {}\n} //INITIALIZATION SAGA (LISTENER) WHEN USER SIGNS OUT\n\nexport function* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n} //INITIALIZATION SAGA WHEN WE START TO STORE CART ITEMS IN FIREBASE\n\nexport function* onCartItemsStoreStart() {\n  yield takeLatest(CartActionTypes.CART_ITEMS_STORE_START, storeCartItemsInFirebase);\n} //INITIALIZATION SAGA WHEN USER SIGN IN TO PULL IT THEIR CART ITEMS\n\nexport function* onSignInSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_IN_SUCCESS, fetchCartCollectionAsync);\n} //TODO: CREATE AN INITIALIZING SAGA WHEN USER MANUALLY CLICKS BUTTON TO CLEAR OUT THE ENTIRE CART\n//CART ROOT SAGA\n\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess), call(onCartItemsStoreStart), call(onSignInSuccess)]);\n}","map":{"version":3,"sources":["/Users/gabrielbundala/Desktop/crown-clothing2/client/src/redux/cart/cart.sagas.js"],"names":["all","call","takeLatest","put","select","addCartItemsCollectionAndDocuments","firestore","getCurrentUser","selectCurrentUser","UserActionTypes","cartItemsStoreFailure","cartItemsStoreSuccess","clearCart","selectCartItems","CartActionTypes","clearCartOnSignOut","storeCartItemsInFirebase","cartItems","user","console","log","error","fetchCartCollectionAsync","collectionRef","collection","id","snapshot","get","docs","onSignOutSuccess","SIGN_OUT_SUCCESS","onCartItemsStoreStart","CART_ITEMS_STORE_START","onSignInSuccess","SIGN_IN_SUCCESS","cartSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,MAArC,QAAmD,oBAAnD;AACA,SACEC,kCADF,EAEEC,SAFF,EAGEC,cAHF,QAIO,+BAJP;AAKA,SAASC,iBAAT,QAAkC,uBAAlC;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,SACEC,qBADF,EAEEC,qBAFF,EAGEC,SAHF,QAIO,gBAJP;AAKA,SAASC,eAAT,QAAgC,kBAAhC;AACA,SAASC,eAAT,QAAgC,cAAhC,C,CAEA;;AACA,OAAO,UAAUC,kBAAV,GAA+B;AACpC,QAAMZ,GAAG,CAACS,SAAS,EAAV,CAAT;AACD,C,CAED;AACA;AACA;;AACA,OAAO,UAAUI,wBAAV,GAAqC;AAC1C,MAAI;AACF,UAAMC,SAAS,GAAG,MAAMb,MAAM,CAACS,eAAD,CAA9B;AACA,UAAMK,IAAI,GAAG,MAAMd,MAAM,CAACI,iBAAD,CAAzB,CAFE,CAGF;AACA;;AACA,QAAI,CAACU,IAAL,EAAW;AACX,UAAMjB,IAAI,CACRI,kCADQ,EAER,WAFQ,EAGRY,SAHQ,EAIRC,IAJQ,CAAV;AAMAC,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAZE,CAcF;AAEA;AACD,GAjBD,CAiBE,OAAOC,KAAP,EAAc;AACd,UAAMlB,GAAG,CAACO,qBAAqB,CAACW,KAAD,CAAtB,CAAT;AACD;AACF,C,CAED;;AACA,OAAO,UAAUC,wBAAV,GAAqC;AAC1C,MAAI;AACF,UAAMJ,IAAI,GAAG,MAAMd,MAAM,CAACI,iBAAD,CAAzB;AACA,UAAMe,aAAa,GAAGjB,SAAS,CAACkB,UAAV,CAAsB,SAAQN,IAAI,CAACO,EAAG,YAAtC,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMH,aAAa,CAACI,GAAd,EAAvB;AACAR,IAAAA,OAAO,CAACC,GAAR,CACE,mDADF,EAEEM,QAAQ,CAACE,IAFX,EAJE,CAQF;AACA;AACA;AACA;AACD,GAZD,CAYE,OAAOP,KAAP,EAAc,CAAE;AACnB,C,CAED;;AACA,OAAO,UAAUQ,gBAAV,GAA6B;AAClC,QAAM3B,UAAU,CAACO,eAAe,CAACqB,gBAAjB,EAAmCf,kBAAnC,CAAhB;AACD,C,CAED;;AACA,OAAO,UAAUgB,qBAAV,GAAkC;AACvC,QAAM7B,UAAU,CACdY,eAAe,CAACkB,sBADF,EAEdhB,wBAFc,CAAhB;AAID,C,CAED;;AACA,OAAO,UAAUiB,eAAV,GAA4B;AACjC,QAAM/B,UAAU,CAACO,eAAe,CAACyB,eAAjB,EAAkCZ,wBAAlC,CAAhB;AACD,C,CAED;AAEA;;AACA,OAAO,UAAUa,SAAV,GAAsB;AAC3B,QAAMnC,GAAG,CAAC,CACRC,IAAI,CAAC4B,gBAAD,CADI,EAER5B,IAAI,CAAC8B,qBAAD,CAFI,EAGR9B,IAAI,CAACgC,eAAD,CAHI,CAAD,CAAT;AAKD","sourcesContent":["import { all, call, takeLatest, put, select } from \"redux-saga/effects\";\nimport {\n  addCartItemsCollectionAndDocuments,\n  firestore,\n  getCurrentUser,\n} from \"../../firebase/firebase.utils\";\nimport { selectCurrentUser } from \"../user/user.selector\";\nimport UserActionTypes from \"../user/user.types\";\nimport {\n  cartItemsStoreFailure,\n  cartItemsStoreSuccess,\n  clearCart,\n} from \"./cart.actions\";\nimport { selectCartItems } from \"./cart.selectors\";\nimport { CartActionTypes } from \"./cart.types\";\n\n//FUNCTION || ACTION SAGA (METHOD)\nexport function* clearCartOnSignOut() {\n  yield put(clearCart());\n}\n\n//CALLING THE FIREBASE METHOD TO STORE CART ITEMS IN FIREBASE\n//FIXME: Remove the console log here\n//FIXME: Find a way to put in the cartItemsStoreSuccess action - as in what do we to the client once we successfuly store to firebase -- maybe somekind of a redirect to another page\nexport function* storeCartItemsInFirebase() {\n  try {\n    const cartItems = yield select(selectCartItems);\n    const user = yield select(selectCurrentUser);\n    // const userAuth = yield getCurrentUser();\n    // if (!userAuth) return; //if user never signed in, end session\n    if (!user) return;\n    yield call(\n      addCartItemsCollectionAndDocuments,\n      \"cartItems\",\n      cartItems,\n      user\n    );\n    console.log(\"this saga has been called\");\n\n    // yield put(cartItemsStoreSuccess());\n\n    //plug into redux the state of the cartItems for the specific user from Firestore into the App -- UPDATE: we don't want to do this as it is irrelevant as data is already in redux store\n  } catch (error) {\n    yield put(cartItemsStoreFailure(error));\n  }\n}\n\n//ASYNC FUNC TO PULL CARTITEMS COLLECTION FROM FIRESTORE -- FOR RESPECTIVE SIGNED IN USER\nexport function* fetchCartCollectionAsync() {\n  try {\n    const user = yield select(selectCurrentUser);\n    const collectionRef = firestore.collection(`users/${user.id}/cartItems`);\n    const snapshot = yield collectionRef.get();\n    console.log(\n      \"how does the pulled data from cartitems look like\",\n      snapshot.docs\n    );\n    // const collectionsMap = yield call(\n    //   ,\n    //   snapshot\n    // );\n  } catch (error) {}\n}\n\n//INITIALIZATION SAGA (LISTENER) WHEN USER SIGNS OUT\nexport function* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\n\n//INITIALIZATION SAGA WHEN WE START TO STORE CART ITEMS IN FIREBASE\nexport function* onCartItemsStoreStart() {\n  yield takeLatest(\n    CartActionTypes.CART_ITEMS_STORE_START,\n    storeCartItemsInFirebase\n  );\n}\n\n//INITIALIZATION SAGA WHEN USER SIGN IN TO PULL IT THEIR CART ITEMS\nexport function* onSignInSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_IN_SUCCESS, fetchCartCollectionAsync);\n}\n\n//TODO: CREATE AN INITIALIZING SAGA WHEN USER MANUALLY CLICKS BUTTON TO CLEAR OUT THE ENTIRE CART\n\n//CART ROOT SAGA\nexport function* cartSagas() {\n  yield all([\n    call(onSignOutSuccess),\n    call(onCartItemsStoreStart),\n    call(onSignInSuccess),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}