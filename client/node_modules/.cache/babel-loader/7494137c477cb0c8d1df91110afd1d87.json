{"ast":null,"code":"import { all, call, takeLatest, put } from \"redux-saga/effects\";\nimport { addCartItemsCollectionAndDocuments, getCurrentUser } from \"../../firebase/firebase.utils\";\nimport UserActionTypes from \"../user/user.types\";\nimport { cartItemsStoreFailure, clearCart } from \"./cart.actions\";\nimport { selectCartItems } from \"./cart.selectors\";\nimport { CartActionTypes } from \"./cart.types\"; //FUNCTION || ACTION SAGA (METHOD)\n\nexport function* clearCartOnSignOut() {\n  yield put(clearCart());\n} //CALLING THE FIREBASE METHOD TO STORE CART ITEMS IN FIREBASE\n\nexport function* storeCartItemsInFirebase() {\n  try {\n    // const userAuth = yield getCurrentUser();\n    // if (!userAuth) return; //if user never signed in, end session\n    yield call(addCartItemsCollectionAndDocuments, \"cartitems\", selectCartItems); //plug into redux the state of the cartItems for the specific user from Firestore into the App\n  } catch (error) {\n    yield put(cartItemsStoreFailure(error));\n  }\n} //INITIALIZATION SAGA (LISTENER) WHEN USER SIGNS OUT\n\nexport function* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n} //INITIALIZATION SAGA WHEN WE START TO STORE CART ITEMS IN FIREBASE\n\nexport function* onCartItemsStoreStart() {\n  yield takeLatest(CartActionTypes.CART_ITEMS_STORE_START, storeCartItemsInFirebase);\n} //TODO: CREATE AN INITIALIZING SAGA WHEN USER MANUALLY CLICKS BUTTON TO CLEAR OUT THE ENTIRE CART\n//CART ROOT SAGA\n\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess)]);\n}","map":{"version":3,"sources":["/Users/gabrielbundala/Desktop/crown-clothing2/client/src/redux/cart/cart.sagas.js"],"names":["all","call","takeLatest","put","addCartItemsCollectionAndDocuments","getCurrentUser","UserActionTypes","cartItemsStoreFailure","clearCart","selectCartItems","CartActionTypes","clearCartOnSignOut","storeCartItemsInFirebase","error","onSignOutSuccess","SIGN_OUT_SUCCESS","onCartItemsStoreStart","CART_ITEMS_STORE_START","cartSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SACEC,kCADF,EAEEC,cAFF,QAGO,+BAHP;AAIA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,SAASC,qBAAT,EAAgCC,SAAhC,QAAiD,gBAAjD;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,SAASC,eAAT,QAAgC,cAAhC,C,CAEA;;AACA,OAAO,UAAUC,kBAAV,GAA+B;AACpC,QAAMR,GAAG,CAACK,SAAS,EAAV,CAAT;AACD,C,CAED;;AACA,OAAO,UAAUI,wBAAV,GAAqC;AAC1C,MAAI;AACF;AACA;AACA,UAAMX,IAAI,CACRG,kCADQ,EAER,WAFQ,EAGRK,eAHQ,CAAV,CAHE,CASF;AACD,GAVD,CAUE,OAAOI,KAAP,EAAc;AACd,UAAMV,GAAG,CAACI,qBAAqB,CAACM,KAAD,CAAtB,CAAT;AACD;AACF,C,CAED;;AACA,OAAO,UAAUC,gBAAV,GAA6B;AAClC,QAAMZ,UAAU,CAACI,eAAe,CAACS,gBAAjB,EAAmCJ,kBAAnC,CAAhB;AACD,C,CAED;;AACA,OAAO,UAAUK,qBAAV,GAAkC;AACvC,QAAMd,UAAU,CACdQ,eAAe,CAACO,sBADF,EAEdL,wBAFc,CAAhB;AAID,C,CAED;AAEA;;AACA,OAAO,UAAUM,SAAV,GAAsB;AAC3B,QAAMlB,GAAG,CAAC,CAACC,IAAI,CAACa,gBAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { all, call, takeLatest, put } from \"redux-saga/effects\";\nimport {\n  addCartItemsCollectionAndDocuments,\n  getCurrentUser,\n} from \"../../firebase/firebase.utils\";\nimport UserActionTypes from \"../user/user.types\";\nimport { cartItemsStoreFailure, clearCart } from \"./cart.actions\";\nimport { selectCartItems } from \"./cart.selectors\";\nimport { CartActionTypes } from \"./cart.types\";\n\n//FUNCTION || ACTION SAGA (METHOD)\nexport function* clearCartOnSignOut() {\n  yield put(clearCart());\n}\n\n//CALLING THE FIREBASE METHOD TO STORE CART ITEMS IN FIREBASE\nexport function* storeCartItemsInFirebase() {\n  try {\n    // const userAuth = yield getCurrentUser();\n    // if (!userAuth) return; //if user never signed in, end session\n    yield call(\n      addCartItemsCollectionAndDocuments,\n      \"cartitems\",\n      selectCartItems\n    );\n\n    //plug into redux the state of the cartItems for the specific user from Firestore into the App\n  } catch (error) {\n    yield put(cartItemsStoreFailure(error));\n  }\n}\n\n//INITIALIZATION SAGA (LISTENER) WHEN USER SIGNS OUT\nexport function* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\n\n//INITIALIZATION SAGA WHEN WE START TO STORE CART ITEMS IN FIREBASE\nexport function* onCartItemsStoreStart() {\n  yield takeLatest(\n    CartActionTypes.CART_ITEMS_STORE_START,\n    storeCartItemsInFirebase\n  );\n}\n\n//TODO: CREATE AN INITIALIZING SAGA WHEN USER MANUALLY CLICKS BUTTON TO CLEAR OUT THE ENTIRE CART\n\n//CART ROOT SAGA\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess)]);\n}\n"]},"metadata":{},"sourceType":"module"}