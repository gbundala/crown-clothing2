{"ast":null,"code":"//IMPORT STATEMENTS\nimport ShopActionTypes from \"./shop.types\";\nimport { convertCollectionsSnapshotToMap, firestore } from \"../../firebase/firebase.utils\"; //ACTION METHODS TO FETCH COLLECTION ITEMS FROM FIREBASE\n\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n});\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap\n});\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n}); //ACTION METHODS TO STORE COLLECTION ITEMS TO FIREBASE\n\nexport const collectionItemsStoreStart = () => ({\n  type: ShopActionTypes.COLLECTION_ITEMS_STORE_START\n});\nexport const collectionItemsStoreSuccess = collectionItems => ({\n  type: ShopActionTypes.COLLECTION_ITEMS_STORE_SUCCESS,\n  payload: collectionItems\n});\nexport const collectionItemsStoreFailure = error => ({\n  type: ShopActionTypes.COLLECTION_ITEMS_STORE_FAILURE,\n  payload: error\n}); //TODO: Code below is no longer relevant -- it was used when learning thunk -- revise and remove it\n\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection(\"collections\");\n    dispatch(fetchCollectionsStart()); //we can do this becuause of redux-thunk\n\n    collectionRef.get().then(snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      dispatch(fetchCollectionsSuccess(collectionsMap));\n    }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n  };\n}; //if redux-thunk middleware is enabled, anytime you attempt to dispatch a function\n//instead of an object, the middleware will call that function with dispatch method\n//itself as the first argument.","map":{"version":3,"sources":["/Users/gabrielbundala/Desktop/crown-clothing2/client/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","convertCollectionsSnapshotToMap","firestore","fetchCollectionsStart","type","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","collectionsMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsFailure","errorMessage","FETCH_COLLECTIONS_FAILURE","collectionItemsStoreStart","COLLECTION_ITEMS_STORE_START","collectionItemsStoreSuccess","collectionItems","COLLECTION_ITEMS_STORE_SUCCESS","collectionItemsStoreFailure","error","COLLECTION_ITEMS_STORE_FAILURE","fetchCollectionsStartAsync","dispatch","collectionRef","collection","get","then","snapshot","catch","message"],"mappings":"AAAA;AACA,OAAOA,eAAP,MAA4B,cAA5B;AACA,SACEC,+BADF,EAEEC,SAFF,QAGO,+BAHP,C,CAKA;;AACA,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AAC1CC,EAAAA,IAAI,EAAEJ,eAAe,CAACK;AADoB,CAAP,CAA9B;AAIP,OAAO,MAAMC,uBAAuB,GAAIC,cAAD,KAAqB;AAC1DH,EAAAA,IAAI,EAAEJ,eAAe,CAACQ,yBADoC;AAE1DC,EAAAA,OAAO,EAAEF;AAFiD,CAArB,CAAhC;AAKP,OAAO,MAAMG,uBAAuB,GAAIC,YAAD,KAAmB;AACxDP,EAAAA,IAAI,EAAEJ,eAAe,CAACY,yBADkC;AAExDH,EAAAA,OAAO,EAAEE;AAF+C,CAAnB,CAAhC,C,CAKP;;AACA,OAAO,MAAME,yBAAyB,GAAG,OAAO;AAC9CT,EAAAA,IAAI,EAAEJ,eAAe,CAACc;AADwB,CAAP,CAAlC;AAIP,OAAO,MAAMC,2BAA2B,GAAIC,eAAD,KAAsB;AAC/DZ,EAAAA,IAAI,EAAEJ,eAAe,CAACiB,8BADyC;AAE/DR,EAAAA,OAAO,EAAEO;AAFsD,CAAtB,CAApC;AAKP,OAAO,MAAME,2BAA2B,GAAIC,KAAD,KAAY;AACrDf,EAAAA,IAAI,EAAEJ,eAAe,CAACoB,8BAD+B;AAErDX,EAAAA,OAAO,EAAEU;AAF4C,CAAZ,CAApC,C,CAKP;;AACA,OAAO,MAAME,0BAA0B,GAAG,MAAM;AAC9C,SAAQC,QAAD,IAAc;AACnB,UAAMC,aAAa,GAAGrB,SAAS,CAACsB,UAAV,CAAqB,aAArB,CAAtB;AACAF,IAAAA,QAAQ,CAACnB,qBAAqB,EAAtB,CAAR,CAFmB,CAEgB;;AAEnCoB,IAAAA,aAAa,CACVE,GADH,GAEGC,IAFH,CAESC,QAAD,IAAc;AAClB,YAAMpB,cAAc,GAAGN,+BAA+B,CAAC0B,QAAD,CAAtD;AACAL,MAAAA,QAAQ,CAAChB,uBAAuB,CAACC,cAAD,CAAxB,CAAR;AACD,KALH,EAMGqB,KANH,CAMUT,KAAD,IAAWG,QAAQ,CAACZ,uBAAuB,CAACS,KAAK,CAACU,OAAP,CAAxB,CAN5B;AAOD,GAXD;AAYD,CAbM,C,CAeP;AACA;AACA","sourcesContent":["//IMPORT STATEMENTS\nimport ShopActionTypes from \"./shop.types\";\nimport {\n  convertCollectionsSnapshotToMap,\n  firestore,\n} from \"../../firebase/firebase.utils\";\n\n//ACTION METHODS TO FETCH COLLECTION ITEMS FROM FIREBASE\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START,\n});\n\nexport const fetchCollectionsSuccess = (collectionsMap) => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap,\n});\n\nexport const fetchCollectionsFailure = (errorMessage) => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage,\n});\n\n//ACTION METHODS TO STORE COLLECTION ITEMS TO FIREBASE\nexport const collectionItemsStoreStart = () => ({\n  type: ShopActionTypes.COLLECTION_ITEMS_STORE_START,\n});\n\nexport const collectionItemsStoreSuccess = (collectionItems) => ({\n  type: ShopActionTypes.COLLECTION_ITEMS_STORE_SUCCESS,\n  payload: collectionItems,\n});\n\nexport const collectionItemsStoreFailure = (error) => ({\n  type: ShopActionTypes.COLLECTION_ITEMS_STORE_FAILURE,\n  payload: error,\n});\n\n//TODO: Code below is no longer relevant -- it was used when learning thunk -- revise and remove it\nexport const fetchCollectionsStartAsync = () => {\n  return (dispatch) => {\n    const collectionRef = firestore.collection(\"collections\");\n    dispatch(fetchCollectionsStart()); //we can do this becuause of redux-thunk\n\n    collectionRef\n      .get()\n      .then((snapshot) => {\n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n        dispatch(fetchCollectionsSuccess(collectionsMap));\n      })\n      .catch((error) => dispatch(fetchCollectionsFailure(error.message)));\n  };\n};\n\n//if redux-thunk middleware is enabled, anytime you attempt to dispatch a function\n//instead of an object, the middleware will call that function with dispatch method\n//itself as the first argument.\n"]},"metadata":{},"sourceType":"module"}