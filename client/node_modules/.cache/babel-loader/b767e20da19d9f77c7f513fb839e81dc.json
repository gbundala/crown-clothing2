{"ast":null,"code":"import { CartActionTypes } from \"./cart.types\";\nimport { addItemToCart, removeItemFromCart } from \"./cart.utils\";\nconst INITIAL_STATE = {\n  hidden: true,\n  cartItems: [],\n  error: null\n};\n\nconst cartReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case CartActionTypes.TOGGLE_CART_HIDDEN:\n      return { ...state,\n        hidden: !state.hidden\n      };\n\n    case CartActionTypes.ADD_ITEM:\n      return { ...state,\n        //we spread everything in our state.\n        cartItems: addItemToCart(state.cartItems, action.payload)\n      };\n    //this case is only fired when the user logs into another computer i.e. when the userAuth is rehydrated\n\n    case CartActionTypes.FETCH_CART_COLLECTION_SUCCESS:\n      return { ...state,\n        cartItems: action.payload,\n        error: null\n      };\n\n    case CartActionTypes.FETCH_CART_COLLECTION_FAILURE:\n      return { ...state,\n        error: action.payload\n      };\n\n    case CartActionTypes.CART_ITEMS_STORE_FAILURE:\n      return { ...state,\n        error: action.payload\n      };\n\n    case CartActionTypes.CLEAR_ITEM_FROM_CART:\n      return { ...state,\n        cartItems: state.cartItems.filter(cartItem => cartItem.id !== action.payload.id) //filter gives us back a new array where the condition above is true\n        //which is the array of cartItems which are not equal to the action.payload\n        //for clearing items from cart as filter returns the array that aligns\n        //with the condition which is true -- hence the remained item are put in this new array\n\n      };\n\n    case CartActionTypes.REMOVE_ITEM:\n      return { ...state,\n        cartItems: removeItemFromCart(state.cartItems, action.payload)\n      };\n\n    case CartActionTypes.CLEAR_CART:\n      return { ...state,\n        cartItems: []\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default cartReducer;","map":{"version":3,"sources":["/Users/gabrielbundala/Documents/crown-clothing2/client/src/redux/cart/cart.reducer.js"],"names":["CartActionTypes","addItemToCart","removeItemFromCart","INITIAL_STATE","hidden","cartItems","error","cartReducer","state","action","type","TOGGLE_CART_HIDDEN","ADD_ITEM","payload","FETCH_CART_COLLECTION_SUCCESS","FETCH_CART_COLLECTION_FAILURE","CART_ITEMS_STORE_FAILURE","CLEAR_ITEM_FROM_CART","filter","cartItem","id","REMOVE_ITEM","CLEAR_CART"],"mappings":"AAAA,SAASA,eAAT,QAAgC,cAAhC;AACA,SAASC,aAAT,EAAwBC,kBAAxB,QAAkD,cAAlD;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,MAAM,EAAE,IADY;AAEpBC,EAAAA,SAAS,EAAE,EAFS;AAGpBC,EAAAA,KAAK,EAAE;AAHa,CAAtB;;AAMA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGL,aAAT,EAAwBM,MAAxB,KAAmC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,eAAe,CAACW,kBAArB;AACE,aAAO,EACL,GAAGH,KADE;AAELJ,QAAAA,MAAM,EAAE,CAACI,KAAK,CAACJ;AAFV,OAAP;;AAIF,SAAKJ,eAAe,CAACY,QAArB;AACE,aAAO,EACL,GAAGJ,KADE;AACK;AACVH,QAAAA,SAAS,EAAEJ,aAAa,CAACO,KAAK,CAACH,SAAP,EAAkBI,MAAM,CAACI,OAAzB;AAFnB,OAAP;AAIF;;AACA,SAAKb,eAAe,CAACc,6BAArB;AACE,aAAO,EACL,GAAGN,KADE;AAELH,QAAAA,SAAS,EAAEI,MAAM,CAACI,OAFb;AAGLP,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAKF,SAAKN,eAAe,CAACe,6BAArB;AACE,aAAO,EACL,GAAGP,KADE;AAELF,QAAAA,KAAK,EAAEG,MAAM,CAACI;AAFT,OAAP;;AAIF,SAAKb,eAAe,CAACgB,wBAArB;AACE,aAAO,EACL,GAAGR,KADE;AAELF,QAAAA,KAAK,EAAEG,MAAM,CAACI;AAFT,OAAP;;AAIF,SAAKb,eAAe,CAACiB,oBAArB;AACE,aAAO,EACL,GAAGT,KADE;AAELH,QAAAA,SAAS,EAAEG,KAAK,CAACH,SAAN,CAAgBa,MAAhB,CACRC,QAAD,IAAcA,QAAQ,CAACC,EAAT,KAAgBX,MAAM,CAACI,OAAP,CAAeO,EADpC,CAFN,CAIF;AACH;AACA;AACA;;AAPK,OAAP;;AASF,SAAKpB,eAAe,CAACqB,WAArB;AACE,aAAO,EACL,GAAGb,KADE;AAELH,QAAAA,SAAS,EAAEH,kBAAkB,CAACM,KAAK,CAACH,SAAP,EAAkBI,MAAM,CAACI,OAAzB;AAFxB,OAAP;;AAIF,SAAKb,eAAe,CAACsB,UAArB;AACE,aAAO,EACL,GAAGd,KADE;AAELH,QAAAA,SAAS,EAAE;AAFN,OAAP;;AAIF;AACE,aAAOG,KAAP;AAjDJ;AAmDD,CApDD;;AAsDA,eAAeD,WAAf","sourcesContent":["import { CartActionTypes } from \"./cart.types\";\nimport { addItemToCart, removeItemFromCart } from \"./cart.utils\";\n\nconst INITIAL_STATE = {\n  hidden: true,\n  cartItems: [],\n  error: null,\n};\n\nconst cartReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case CartActionTypes.TOGGLE_CART_HIDDEN:\n      return {\n        ...state,\n        hidden: !state.hidden,\n      };\n    case CartActionTypes.ADD_ITEM:\n      return {\n        ...state, //we spread everything in our state.\n        cartItems: addItemToCart(state.cartItems, action.payload),\n      };\n    //this case is only fired when the user logs into another computer i.e. when the userAuth is rehydrated\n    case CartActionTypes.FETCH_CART_COLLECTION_SUCCESS:\n      return {\n        ...state,\n        cartItems: action.payload,\n        error: null,\n      };\n    case CartActionTypes.FETCH_CART_COLLECTION_FAILURE:\n      return {\n        ...state,\n        error: action.payload,\n      };\n    case CartActionTypes.CART_ITEMS_STORE_FAILURE:\n      return {\n        ...state,\n        error: action.payload,\n      };\n    case CartActionTypes.CLEAR_ITEM_FROM_CART:\n      return {\n        ...state,\n        cartItems: state.cartItems.filter(\n          (cartItem) => cartItem.id !== action.payload.id\n        ), //filter gives us back a new array where the condition above is true\n        //which is the array of cartItems which are not equal to the action.payload\n        //for clearing items from cart as filter returns the array that aligns\n        //with the condition which is true -- hence the remained item are put in this new array\n      };\n    case CartActionTypes.REMOVE_ITEM:\n      return {\n        ...state,\n        cartItems: removeItemFromCart(state.cartItems, action.payload),\n      };\n    case CartActionTypes.CLEAR_CART:\n      return {\n        ...state,\n        cartItems: [],\n      };\n    default:\n      return state;\n  }\n};\n\nexport default cartReducer;\n"]},"metadata":{},"sourceType":"module"}