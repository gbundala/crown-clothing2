{"ast":null,"code":"import { all, call, takeLatest, put, select } from \"redux-saga/effects\";\nimport { addCartItemsCollectionAndDocuments, getCurrentUser } from \"../../firebase/firebase.utils\";\nimport UserActionTypes from \"../user/user.types\";\nimport { cartItemsStoreFailure, cartItemsStoreSuccess, clearCart } from \"./cart.actions\";\nimport { selectCartItems } from \"./cart.selectors\";\nimport { CartActionTypes } from \"./cart.types\"; //FUNCTION || ACTION SAGA (METHOD)\n\nexport function* clearCartOnSignOut() {\n  yield put(clearCart());\n} //CALLING THE FIREBASE METHOD TO STORE CART ITEMS IN FIREBASE\n\nexport function* storeCartItemsInFirebase() {\n  try {\n    const cartItems = select(selectCartItems); // const userAuth = yield getCurrentUser();\n    // if (!userAuth) return; //if user never signed in, end session\n\n    yield call(addCartItemsCollectionAndDocuments, \"cartItems\", cartItems);\n    yield put(cartItemsStoreSuccess()); //plug into redux the state of the cartItems for the specific user from Firestore into the App\n  } catch (error) {\n    yield put(cartItemsStoreFailure(error));\n  }\n} //INITIALIZATION SAGA (LISTENER) WHEN USER SIGNS OUT\n\nexport function* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n} //INITIALIZATION SAGA WHEN WE START TO STORE CART ITEMS IN FIREBASE\n\nexport function* onCartItemsStoreStart() {\n  yield takeLatest(CartActionTypes.CART_ITEMS_STORE_START, storeCartItemsInFirebase);\n} //TODO: CREATE AN INITIALIZING SAGA WHEN USER MANUALLY CLICKS BUTTON TO CLEAR OUT THE ENTIRE CART\n//CART ROOT SAGA\n\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess), call(onCartItemsStoreStart)]);\n}","map":{"version":3,"sources":["/Users/gabrielbundala/Desktop/crown-clothing2/client/src/redux/cart/cart.sagas.js"],"names":["all","call","takeLatest","put","select","addCartItemsCollectionAndDocuments","getCurrentUser","UserActionTypes","cartItemsStoreFailure","cartItemsStoreSuccess","clearCart","selectCartItems","CartActionTypes","clearCartOnSignOut","storeCartItemsInFirebase","cartItems","error","onSignOutSuccess","SIGN_OUT_SUCCESS","onCartItemsStoreStart","CART_ITEMS_STORE_START","cartSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,MAArC,QAAmD,oBAAnD;AACA,SACEC,kCADF,EAEEC,cAFF,QAGO,+BAHP;AAIA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,SACEC,qBADF,EAEEC,qBAFF,EAGEC,SAHF,QAIO,gBAJP;AAKA,SAASC,eAAT,QAAgC,kBAAhC;AACA,SAASC,eAAT,QAAgC,cAAhC,C,CAEA;;AACA,OAAO,UAAUC,kBAAV,GAA+B;AACpC,QAAMV,GAAG,CAACO,SAAS,EAAV,CAAT;AACD,C,CAED;;AACA,OAAO,UAAUI,wBAAV,GAAqC;AAC1C,MAAI;AACF,UAAMC,SAAS,GAAGX,MAAM,CAACO,eAAD,CAAxB,CADE,CAEF;AACA;;AACA,UAAMV,IAAI,CAACI,kCAAD,EAAqC,WAArC,EAAkDU,SAAlD,CAAV;AAEA,UAAMZ,GAAG,CAACM,qBAAqB,EAAtB,CAAT,CANE,CAQF;AACD,GATD,CASE,OAAOO,KAAP,EAAc;AACd,UAAMb,GAAG,CAACK,qBAAqB,CAACQ,KAAD,CAAtB,CAAT;AACD;AACF,C,CAED;;AACA,OAAO,UAAUC,gBAAV,GAA6B;AAClC,QAAMf,UAAU,CAACK,eAAe,CAACW,gBAAjB,EAAmCL,kBAAnC,CAAhB;AACD,C,CAED;;AACA,OAAO,UAAUM,qBAAV,GAAkC;AACvC,QAAMjB,UAAU,CACdU,eAAe,CAACQ,sBADF,EAEdN,wBAFc,CAAhB;AAID,C,CAED;AAEA;;AACA,OAAO,UAAUO,SAAV,GAAsB;AAC3B,QAAMrB,GAAG,CAAC,CAACC,IAAI,CAACgB,gBAAD,CAAL,EAAyBhB,IAAI,CAACkB,qBAAD,CAA7B,CAAD,CAAT;AACD","sourcesContent":["import { all, call, takeLatest, put, select } from \"redux-saga/effects\";\nimport {\n  addCartItemsCollectionAndDocuments,\n  getCurrentUser,\n} from \"../../firebase/firebase.utils\";\nimport UserActionTypes from \"../user/user.types\";\nimport {\n  cartItemsStoreFailure,\n  cartItemsStoreSuccess,\n  clearCart,\n} from \"./cart.actions\";\nimport { selectCartItems } from \"./cart.selectors\";\nimport { CartActionTypes } from \"./cart.types\";\n\n//FUNCTION || ACTION SAGA (METHOD)\nexport function* clearCartOnSignOut() {\n  yield put(clearCart());\n}\n\n//CALLING THE FIREBASE METHOD TO STORE CART ITEMS IN FIREBASE\nexport function* storeCartItemsInFirebase() {\n  try {\n    const cartItems = select(selectCartItems);\n    // const userAuth = yield getCurrentUser();\n    // if (!userAuth) return; //if user never signed in, end session\n    yield call(addCartItemsCollectionAndDocuments, \"cartItems\", cartItems);\n\n    yield put(cartItemsStoreSuccess());\n\n    //plug into redux the state of the cartItems for the specific user from Firestore into the App\n  } catch (error) {\n    yield put(cartItemsStoreFailure(error));\n  }\n}\n\n//INITIALIZATION SAGA (LISTENER) WHEN USER SIGNS OUT\nexport function* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\n\n//INITIALIZATION SAGA WHEN WE START TO STORE CART ITEMS IN FIREBASE\nexport function* onCartItemsStoreStart() {\n  yield takeLatest(\n    CartActionTypes.CART_ITEMS_STORE_START,\n    storeCartItemsInFirebase\n  );\n}\n\n//TODO: CREATE AN INITIALIZING SAGA WHEN USER MANUALLY CLICKS BUTTON TO CLEAR OUT THE ENTIRE CART\n\n//CART ROOT SAGA\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess), call(onCartItemsStoreStart)]);\n}\n"]},"metadata":{},"sourceType":"module"}