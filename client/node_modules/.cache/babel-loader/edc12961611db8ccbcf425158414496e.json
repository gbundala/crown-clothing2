{"ast":null,"code":"//IMPORTS\nimport { takeLatest, call, put, all } from \"redux-saga/effects\";\nimport ShopActionTypes from \"./shop.types\";\nimport { addIndividualShopDocumentItems, convertCollectionsSnapshotToMap, firestore, uploadSellerImageFileToStorage } from \"../../firebase/firebase.utils\";\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from \"./shop.actions\";\nimport { onCartItemsStoreStart, storeCartItemsInFirebase } from \"../cart/cart.sagas\"; //FETCH COLLECTIONS FROM FIREBASE TO THE APP\n\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection(\"collections\");\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n} //STORING NEW COLLECTION ITEMS TO FIREBASE\n\nexport function* storeCollectionItemsInFirebaseAsync({\n  payload: {\n    name,\n    price,\n    imageUrl,\n    collection\n  }\n}) {\n  console.log(\"Saga is fired\");\n\n  try {\n    yield call(addIndividualShopDocumentItems, \"collections\", collection, name, price, imageUrl);\n    console.log(\"Successsfully stored data in firestore\");\n  } catch (error) {\n    // FIXME: Put the redux action for failure\n    console.error(\"Error in storing to Firebase: \", error);\n  }\n} //SELLER FILE UPLOAD TO FIREBASE STORAGE\n\nexport function* uploadSellerFileToStorageAsync({\n  payload\n}) {\n  console.log(\"Saga is fired: \", payload);\n\n  try {\n    yield call(uploadSellerImageFileToStorage);\n    console.log(\"Successfully uploaded an image\");\n  } catch (error) {\n    console.error(\"Error in uploading file to Storage: \", error);\n  }\n} //INITIALIZATION SAGA TO FETCH DATA FROM FIREBASE\n\nexport function* fetchCollectionsStart() {\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n} //INITIALIZATION SAGA (LISTENER) TO START STORING COLLECTION ITEMS IN FIREBASE\n\nexport function* onCollectionItemsStoreStart() {\n  yield takeLatest(ShopActionTypes.COLLECTION_ITEMS_STORE_START, storeCollectionItemsInFirebaseAsync);\n} //INITIALIZATION SAGA TO START FILE UPLOAD BY SELLER\n\nexport function* onSellerFileUploadStart() {\n  yield takeLatest(ShopActionTypes.SELLER_FILE_UPLOAD_START, uploadSellerFileToStorageAsync);\n} //ROOT SHOP SAGA\n\nexport function* shopSagas() {\n  yield all([call(fetchCollectionsStart), call(onCollectionItemsStoreStart), call(onSellerFileUploadStart)]);\n}","map":{"version":3,"sources":["/Users/gabrielbundala/Documents/crown-clothing2/client/src/redux/shop/shop.sagas.js"],"names":["takeLatest","call","put","all","ShopActionTypes","addIndividualShopDocumentItems","convertCollectionsSnapshotToMap","firestore","uploadSellerImageFileToStorage","fetchCollectionsSuccess","fetchCollectionsFailure","onCartItemsStoreStart","storeCartItemsInFirebase","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionsMap","error","message","storeCollectionItemsInFirebaseAsync","payload","name","price","imageUrl","console","log","uploadSellerFileToStorageAsync","fetchCollectionsStart","FETCH_COLLECTIONS_START","onCollectionItemsStoreStart","COLLECTION_ITEMS_STORE_START","onSellerFileUploadStart","SELLER_FILE_UPLOAD_START","shopSagas"],"mappings":"AAAA;AACA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SACEC,8BADF,EAEEC,+BAFF,EAGEC,SAHF,EAIEC,8BAJF,QAKO,+BALP;AAMA,SACEC,uBADF,EAEEC,uBAFF,QAGO,gBAHP;AAIA,SACEC,qBADF,EAEEC,wBAFF,QAGO,oBAHP,C,CAKA;;AACA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,MAAI;AACF,UAAMC,aAAa,GAAGP,SAAS,CAACQ,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMjB,IAAI,CAC/BK,+BAD+B,EAE/BU,QAF+B,CAAjC;AAIA,UAAMd,GAAG,CAACO,uBAAuB,CAACS,cAAD,CAAxB,CAAT;AACD,GARD,CAQE,OAAOC,KAAP,EAAc;AACd,UAAMjB,GAAG,CAACQ,uBAAuB,CAACS,KAAK,CAACC,OAAP,CAAxB,CAAT;AACD;AACF,C,CAED;;AACA,OAAO,UAAUC,mCAAV,CAA8C;AACnDC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,QAAf;AAAyBV,IAAAA;AAAzB;AAD0C,CAA9C,EAEJ;AACDW,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;;AACA,MAAI;AACF,UAAM1B,IAAI,CACRI,8BADQ,EAER,aAFQ,EAGRU,UAHQ,EAIRQ,IAJQ,EAKRC,KALQ,EAMRC,QANQ,CAAV;AAQAC,IAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;AACD,GAVD,CAUE,OAAOR,KAAP,EAAc;AACd;AACAO,IAAAA,OAAO,CAACP,KAAR,CAAc,gCAAd,EAAgDA,KAAhD;AACD;AACF,C,CAED;;AACA,OAAO,UAAUS,8BAAV,CAAyC;AAAEN,EAAAA;AAAF,CAAzC,EAAsD;AAC3DI,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BL,OAA/B;;AAEA,MAAI;AACF,UAAMrB,IAAI,CAACO,8BAAD,CAAV;AACAkB,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACD,GAHD,CAGE,OAAOR,KAAP,EAAc;AACdO,IAAAA,OAAO,CAACP,KAAR,CAAc,sCAAd,EAAsDA,KAAtD;AACD;AACF,C,CAED;;AACA,OAAO,UAAUU,qBAAV,GAAkC;AACvC,QAAM7B,UAAU,CACdI,eAAe,CAAC0B,uBADF,EAEdjB,qBAFc,CAAhB;AAID,C,CAED;;AACA,OAAO,UAAUkB,2BAAV,GAAwC;AAC7C,QAAM/B,UAAU,CACdI,eAAe,CAAC4B,4BADF,EAEdX,mCAFc,CAAhB;AAID,C,CAED;;AACA,OAAO,UAAUY,uBAAV,GAAoC;AACzC,QAAMjC,UAAU,CACdI,eAAe,CAAC8B,wBADF,EAEdN,8BAFc,CAAhB;AAID,C,CAED;;AACA,OAAO,UAAUO,SAAV,GAAsB;AAC3B,QAAMhC,GAAG,CAAC,CACRF,IAAI,CAAC4B,qBAAD,CADI,EAER5B,IAAI,CAAC8B,2BAAD,CAFI,EAGR9B,IAAI,CAACgC,uBAAD,CAHI,CAAD,CAAT;AAKD","sourcesContent":["//IMPORTS\nimport { takeLatest, call, put, all } from \"redux-saga/effects\";\nimport ShopActionTypes from \"./shop.types\";\nimport {\n  addIndividualShopDocumentItems,\n  convertCollectionsSnapshotToMap,\n  firestore,\n  uploadSellerImageFileToStorage,\n} from \"../../firebase/firebase.utils\";\nimport {\n  fetchCollectionsSuccess,\n  fetchCollectionsFailure,\n} from \"./shop.actions\";\nimport {\n  onCartItemsStoreStart,\n  storeCartItemsInFirebase,\n} from \"../cart/cart.sagas\";\n\n//FETCH COLLECTIONS FROM FIREBASE TO THE APP\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection(\"collections\");\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(\n      convertCollectionsSnapshotToMap,\n      snapshot\n    );\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n}\n\n//STORING NEW COLLECTION ITEMS TO FIREBASE\nexport function* storeCollectionItemsInFirebaseAsync({\n  payload: { name, price, imageUrl, collection },\n}) {\n  console.log(\"Saga is fired\");\n  try {\n    yield call(\n      addIndividualShopDocumentItems,\n      \"collections\",\n      collection,\n      name,\n      price,\n      imageUrl\n    );\n    console.log(\"Successsfully stored data in firestore\");\n  } catch (error) {\n    // FIXME: Put the redux action for failure\n    console.error(\"Error in storing to Firebase: \", error);\n  }\n}\n\n//SELLER FILE UPLOAD TO FIREBASE STORAGE\nexport function* uploadSellerFileToStorageAsync({ payload }) {\n  console.log(\"Saga is fired: \", payload);\n\n  try {\n    yield call(uploadSellerImageFileToStorage);\n    console.log(\"Successfully uploaded an image\");\n  } catch (error) {\n    console.error(\"Error in uploading file to Storage: \", error);\n  }\n}\n\n//INITIALIZATION SAGA TO FETCH DATA FROM FIREBASE\nexport function* fetchCollectionsStart() {\n  yield takeLatest(\n    ShopActionTypes.FETCH_COLLECTIONS_START,\n    fetchCollectionsAsync\n  );\n}\n\n//INITIALIZATION SAGA (LISTENER) TO START STORING COLLECTION ITEMS IN FIREBASE\nexport function* onCollectionItemsStoreStart() {\n  yield takeLatest(\n    ShopActionTypes.COLLECTION_ITEMS_STORE_START,\n    storeCollectionItemsInFirebaseAsync\n  );\n}\n\n//INITIALIZATION SAGA TO START FILE UPLOAD BY SELLER\nexport function* onSellerFileUploadStart() {\n  yield takeLatest(\n    ShopActionTypes.SELLER_FILE_UPLOAD_START,\n    uploadSellerFileToStorageAsync\n  );\n}\n\n//ROOT SHOP SAGA\nexport function* shopSagas() {\n  yield all([\n    call(fetchCollectionsStart),\n    call(onCollectionItemsStoreStart),\n    call(onSellerFileUploadStart),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}