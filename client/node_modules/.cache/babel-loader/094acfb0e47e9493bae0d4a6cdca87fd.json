{"ast":null,"code":"//IMPORTS\nimport { takeLatest, call, put, all } from \"redux-saga/effects\";\nimport ShopActionTypes from \"./shop.types\";\nimport { addIndividualShopDocumentItems, convertCollectionsSnapshotToMap, firestore } from \"../../firebase/firebase.utils\";\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from \"./shop.actions\";\nimport { onCartItemsStoreStart, storeCartItemsInFirebase } from \"../cart/cart.sagas\"; //FETCH COLLECTIONS FROM FIREBASE TO THE APP\n\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection(\"collections\");\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n} //STORING NEW COLLECTION ITEMS TO FIREBASE\n\nexport function* storeCollectionItemsInFirebaseAsync({\n  payload: {\n    name,\n    price,\n    imageUrl\n  }\n}) {\n  console.log(\"Saga is fired\");\n\n  try {\n    yield call(addIndividualShopDocumentItems, \"collections\", \"womens\", name, price, imageUrl);\n  } catch (error) {\n    console.error(\"Error in storing to Firebase: \", error);\n  }\n} //INITIALIZATION SAGA TO FETCH DATA FROM FIREBASE\n\nexport function* fetchCollectionsStart() {\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n} //INITIALIZATION SAGA (LISTENER) TO START STORING COLLECTION ITEMS IN FIREBASE\n\nexport function* onCollectionItemsStoreStart() {\n  yield takeLatest(ShopActionTypes.COLLECTION_ITEMS_STORE_START, storeCollectionItemsInFirebaseAsync);\n} //ROOT SHOP SAGA\n\nexport function* shopSagas() {\n  yield all([call(fetchCollectionsStart), call(onCollectionItemsStoreStart)]);\n}","map":{"version":3,"sources":["/Users/gabrielbundala/Documents/crown-clothing2/client/src/redux/shop/shop.sagas.js"],"names":["takeLatest","call","put","all","ShopActionTypes","addIndividualShopDocumentItems","convertCollectionsSnapshotToMap","firestore","fetchCollectionsSuccess","fetchCollectionsFailure","onCartItemsStoreStart","storeCartItemsInFirebase","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionsMap","error","message","storeCollectionItemsInFirebaseAsync","payload","name","price","imageUrl","console","log","fetchCollectionsStart","FETCH_COLLECTIONS_START","onCollectionItemsStoreStart","COLLECTION_ITEMS_STORE_START","shopSagas"],"mappings":"AAAA;AACA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SACEC,8BADF,EAEEC,+BAFF,EAGEC,SAHF,QAIO,+BAJP;AAKA,SACEC,uBADF,EAEEC,uBAFF,QAGO,gBAHP;AAIA,SACEC,qBADF,EAEEC,wBAFF,QAGO,oBAHP,C,CAKA;;AACA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,MAAI;AACF,UAAMC,aAAa,GAAGN,SAAS,CAACO,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMhB,IAAI,CAC/BK,+BAD+B,EAE/BS,QAF+B,CAAjC;AAIA,UAAMb,GAAG,CAACM,uBAAuB,CAACS,cAAD,CAAxB,CAAT;AACD,GARD,CAQE,OAAOC,KAAP,EAAc;AACd,UAAMhB,GAAG,CAACO,uBAAuB,CAACS,KAAK,CAACC,OAAP,CAAxB,CAAT;AACD;AACF,C,CAED;;AACA,OAAO,UAAUC,mCAAV,CAA8C;AACnDC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf;AAD0C,CAA9C,EAEJ;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;;AACA,MAAI;AACF,UAAMzB,IAAI,CACRI,8BADQ,EAER,aAFQ,EAGR,QAHQ,EAIRiB,IAJQ,EAKRC,KALQ,EAMRC,QANQ,CAAV;AAQD,GATD,CASE,OAAON,KAAP,EAAc;AACdO,IAAAA,OAAO,CAACP,KAAR,CAAc,gCAAd,EAAgDA,KAAhD;AACD;AACF,C,CAED;;AACA,OAAO,UAAUS,qBAAV,GAAkC;AACvC,QAAM3B,UAAU,CACdI,eAAe,CAACwB,uBADF,EAEdhB,qBAFc,CAAhB;AAID,C,CAED;;AACA,OAAO,UAAUiB,2BAAV,GAAwC;AAC7C,QAAM7B,UAAU,CACdI,eAAe,CAAC0B,4BADF,EAEdV,mCAFc,CAAhB;AAID,C,CAED;;AACA,OAAO,UAAUW,SAAV,GAAsB;AAC3B,QAAM5B,GAAG,CAAC,CAACF,IAAI,CAAC0B,qBAAD,CAAL,EAA8B1B,IAAI,CAAC4B,2BAAD,CAAlC,CAAD,CAAT;AACD","sourcesContent":["//IMPORTS\nimport { takeLatest, call, put, all } from \"redux-saga/effects\";\nimport ShopActionTypes from \"./shop.types\";\nimport {\n  addIndividualShopDocumentItems,\n  convertCollectionsSnapshotToMap,\n  firestore,\n} from \"../../firebase/firebase.utils\";\nimport {\n  fetchCollectionsSuccess,\n  fetchCollectionsFailure,\n} from \"./shop.actions\";\nimport {\n  onCartItemsStoreStart,\n  storeCartItemsInFirebase,\n} from \"../cart/cart.sagas\";\n\n//FETCH COLLECTIONS FROM FIREBASE TO THE APP\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection(\"collections\");\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(\n      convertCollectionsSnapshotToMap,\n      snapshot\n    );\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n}\n\n//STORING NEW COLLECTION ITEMS TO FIREBASE\nexport function* storeCollectionItemsInFirebaseAsync({\n  payload: { name, price, imageUrl },\n}) {\n  console.log(\"Saga is fired\");\n  try {\n    yield call(\n      addIndividualShopDocumentItems,\n      \"collections\",\n      \"womens\",\n      name,\n      price,\n      imageUrl\n    );\n  } catch (error) {\n    console.error(\"Error in storing to Firebase: \", error);\n  }\n}\n\n//INITIALIZATION SAGA TO FETCH DATA FROM FIREBASE\nexport function* fetchCollectionsStart() {\n  yield takeLatest(\n    ShopActionTypes.FETCH_COLLECTIONS_START,\n    fetchCollectionsAsync\n  );\n}\n\n//INITIALIZATION SAGA (LISTENER) TO START STORING COLLECTION ITEMS IN FIREBASE\nexport function* onCollectionItemsStoreStart() {\n  yield takeLatest(\n    ShopActionTypes.COLLECTION_ITEMS_STORE_START,\n    storeCollectionItemsInFirebaseAsync\n  );\n}\n\n//ROOT SHOP SAGA\nexport function* shopSagas() {\n  yield all([call(fetchCollectionsStart), call(onCollectionItemsStoreStart)]);\n}\n"]},"metadata":{},"sourceType":"module"}