{"ast":null,"code":"import { all, call, takeLatest, put, select } from \"redux-saga/effects\";\nimport { addCartItemsCollectionAndDocuments, getCurrentUser } from \"../../firebase/firebase.utils\";\nimport { selectCurrentUser } from \"../user/user.selector\";\nimport UserActionTypes from \"../user/user.types\";\nimport { cartItemsStoreFailure, cartItemsStoreSuccess, clearCart } from \"./cart.actions\";\nimport { selectCartItems } from \"./cart.selectors\";\nimport { CartActionTypes } from \"./cart.types\"; //FUNCTION || ACTION SAGA (METHOD)\n\nexport function* clearCartOnSignOut() {\n  yield put(clearCart());\n} //CALLING THE FIREBASE METHOD TO STORE CART ITEMS IN FIREBASE\n//FIXME: Remove the console log here\n\nexport function* storeCartItemsInFirebase() {\n  try {\n    const cartItems = yield select(selectCartItems);\n    const user = yield select(selectCurrentUser); // const userAuth = yield getCurrentUser();\n    // if (!userAuth) return; //if user never signed in, end session\n\n    if (!user) {\n      console.log(!user);\n    }\n\n    yield call(addCartItemsCollectionAndDocuments, \"cartItems\", cartItems, user);\n    console.log(\"this saga has been called\"); // yield put(cartItemsStoreSuccess());\n    //plug into redux the state of the cartItems for the specific user from Firestore into the App\n  } catch (error) {\n    yield put(cartItemsStoreFailure(error));\n  }\n} //INITIALIZATION SAGA (LISTENER) WHEN USER SIGNS OUT\n\nexport function* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n} //INITIALIZATION SAGA WHEN WE START TO STORE CART ITEMS IN FIREBASE\n\nexport function* onCartItemsStoreStart() {\n  yield takeLatest(CartActionTypes.CART_ITEMS_STORE_START, storeCartItemsInFirebase);\n} //TODO: CREATE AN INITIALIZING SAGA WHEN USER MANUALLY CLICKS BUTTON TO CLEAR OUT THE ENTIRE CART\n//CART ROOT SAGA\n\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess), call(onCartItemsStoreStart)]);\n}","map":{"version":3,"sources":["/Users/gabrielbundala/Desktop/crown-clothing2/client/src/redux/cart/cart.sagas.js"],"names":["all","call","takeLatest","put","select","addCartItemsCollectionAndDocuments","getCurrentUser","selectCurrentUser","UserActionTypes","cartItemsStoreFailure","cartItemsStoreSuccess","clearCart","selectCartItems","CartActionTypes","clearCartOnSignOut","storeCartItemsInFirebase","cartItems","user","console","log","error","onSignOutSuccess","SIGN_OUT_SUCCESS","onCartItemsStoreStart","CART_ITEMS_STORE_START","cartSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,MAArC,QAAmD,oBAAnD;AACA,SACEC,kCADF,EAEEC,cAFF,QAGO,+BAHP;AAIA,SAASC,iBAAT,QAAkC,uBAAlC;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,SACEC,qBADF,EAEEC,qBAFF,EAGEC,SAHF,QAIO,gBAJP;AAKA,SAASC,eAAT,QAAgC,kBAAhC;AACA,SAASC,eAAT,QAAgC,cAAhC,C,CAEA;;AACA,OAAO,UAAUC,kBAAV,GAA+B;AACpC,QAAMX,GAAG,CAACQ,SAAS,EAAV,CAAT;AACD,C,CAED;AACA;;AACA,OAAO,UAAUI,wBAAV,GAAqC;AAC1C,MAAI;AACF,UAAMC,SAAS,GAAG,MAAMZ,MAAM,CAACQ,eAAD,CAA9B;AACA,UAAMK,IAAI,GAAG,MAAMb,MAAM,CAACG,iBAAD,CAAzB,CAFE,CAGF;AACA;;AACA,QAAI,CAACU,IAAL,EAAW;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAY,CAACF,IAAb;AACD;;AACD,UAAMhB,IAAI,CACRI,kCADQ,EAER,WAFQ,EAGRW,SAHQ,EAIRC,IAJQ,CAAV;AAMAC,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAdE,CAgBF;AAEA;AACD,GAnBD,CAmBE,OAAOC,KAAP,EAAc;AACd,UAAMjB,GAAG,CAACM,qBAAqB,CAACW,KAAD,CAAtB,CAAT;AACD;AACF,C,CAED;;AACA,OAAO,UAAUC,gBAAV,GAA6B;AAClC,QAAMnB,UAAU,CAACM,eAAe,CAACc,gBAAjB,EAAmCR,kBAAnC,CAAhB;AACD,C,CAED;;AACA,OAAO,UAAUS,qBAAV,GAAkC;AACvC,QAAMrB,UAAU,CACdW,eAAe,CAACW,sBADF,EAEdT,wBAFc,CAAhB;AAID,C,CAED;AAEA;;AACA,OAAO,UAAUU,SAAV,GAAsB;AAC3B,QAAMzB,GAAG,CAAC,CAACC,IAAI,CAACoB,gBAAD,CAAL,EAAyBpB,IAAI,CAACsB,qBAAD,CAA7B,CAAD,CAAT;AACD","sourcesContent":["import { all, call, takeLatest, put, select } from \"redux-saga/effects\";\nimport {\n  addCartItemsCollectionAndDocuments,\n  getCurrentUser,\n} from \"../../firebase/firebase.utils\";\nimport { selectCurrentUser } from \"../user/user.selector\";\nimport UserActionTypes from \"../user/user.types\";\nimport {\n  cartItemsStoreFailure,\n  cartItemsStoreSuccess,\n  clearCart,\n} from \"./cart.actions\";\nimport { selectCartItems } from \"./cart.selectors\";\nimport { CartActionTypes } from \"./cart.types\";\n\n//FUNCTION || ACTION SAGA (METHOD)\nexport function* clearCartOnSignOut() {\n  yield put(clearCart());\n}\n\n//CALLING THE FIREBASE METHOD TO STORE CART ITEMS IN FIREBASE\n//FIXME: Remove the console log here\nexport function* storeCartItemsInFirebase() {\n  try {\n    const cartItems = yield select(selectCartItems);\n    const user = yield select(selectCurrentUser);\n    // const userAuth = yield getCurrentUser();\n    // if (!userAuth) return; //if user never signed in, end session\n    if (!user) {\n      console.log(!user);\n    }\n    yield call(\n      addCartItemsCollectionAndDocuments,\n      \"cartItems\",\n      cartItems,\n      user\n    );\n    console.log(\"this saga has been called\");\n\n    // yield put(cartItemsStoreSuccess());\n\n    //plug into redux the state of the cartItems for the specific user from Firestore into the App\n  } catch (error) {\n    yield put(cartItemsStoreFailure(error));\n  }\n}\n\n//INITIALIZATION SAGA (LISTENER) WHEN USER SIGNS OUT\nexport function* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\n\n//INITIALIZATION SAGA WHEN WE START TO STORE CART ITEMS IN FIREBASE\nexport function* onCartItemsStoreStart() {\n  yield takeLatest(\n    CartActionTypes.CART_ITEMS_STORE_START,\n    storeCartItemsInFirebase\n  );\n}\n\n//TODO: CREATE AN INITIALIZING SAGA WHEN USER MANUALLY CLICKS BUTTON TO CLEAR OUT THE ENTIRE CART\n\n//CART ROOT SAGA\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess), call(onCartItemsStoreStart)]);\n}\n"]},"metadata":{},"sourceType":"module"}