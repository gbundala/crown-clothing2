{"ast":null,"code":"//IMPORTS\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\"; //MAIN CONFIG OBJECT FROM FIREBASE TO LINK OUR APP WITH OUR FIREBASE PROJECT\n\nconst config = {\n  apiKey: \"AIzaSyBjUDdfvHbQXYWM4_mypKG_JE2MIm9r7mU\",\n  authDomain: \"crown-db2-79d4d.firebaseapp.com\",\n  databaseURL: \"https://crown-db2-79d4d.firebaseio.com\",\n  projectId: \"crown-db2-79d4d\",\n  storageBucket: \"crown-db2-79d4d.appspot.com\",\n  messagingSenderId: \"507911018338\",\n  appId: \"1:507911018338:web:3c3d5c1c4aa9fad1b7be3b\"\n}; //CREATING USER INTO OUR FIRESTORE DATABASE\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n}; //ADDING OUR COLLECTION TO FIRESTORE\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef);\n  const batch = firestore.batch(); //forEach is similar to map but does not create a new array. we want to call the function on each obj\n\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n}; //ADDING USER CARTITEMS TO FIRESTORE\n\nexport const addCartItemsCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const cartItemsRef = firestore.collection(collectionKey);\n  console.log(cartItemsRef);\n  const cartItemsSnapshot = cartItemsRef.get();\n  console.log(cartItemsSnapshot);\n\n  if (cartItemsRef.empty) {\n    const batch = firestore.batch();\n    objectsToAdd.forEach(obj => {\n      const newDocRef = cartItemsRef.doc();\n      const newDocSnapshot = newDocRef.get();\n      console.log(newDocSnapshot);\n      batch.set(newDocRef, obj);\n    });\n    return await batch.commit();\n  } //otherwise if it is not empty we set transactionally the docs  i.e. one after another not in batch\n\n}; //PULLING DATA FROM FIRESTORE 'COLLECTIONS' COLLECTION INTO REDUX THEN INTO RESPECTIVE REACT COMPONENTS/CONTAINERS THAT NEED IT\n\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      //then we pass in our title and items as we have destructured them above\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n}; //USER SESSION PERSISTENCE UTIL\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nfirebase.initializeApp(config); //Initializes firebase\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); //Gives us access to the auth Googleprovider class from authentication library\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider(); //FACEBOOK AUTH PROVIDER\n\nexport const facebookProvider = new firebase.auth.FacebookAuthProvider(); //prompt gives us the promp UI for user to select google account to authorise\n\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider); //SIGN IN WITH FACEBOOK\n\nfacebookProvider.setCustomParameters({\n  display: \"popup\"\n});\nexport const signInWithFacebook = () => auth.signInWithPopup(facebookProvider);\nexport default firebase; //https://crown-db2-79d4d.firebaseapp.com/__/auth/handler\n//OTHER INFORMATION\n//this is where we store all firebase utilities files or methods\n//above is the config object that we import from the firebase\n//utilities library","map":{"version":3,"sources":["/Users/gabrielbundala/Desktop/crown-clothing2/client/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","addCartItemsCollectionAndDocuments","cartItemsRef","cartItemsSnapshot","empty","newDocSnapshot","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","initializeApp","googleProvider","GoogleAuthProvider","facebookProvider","FacebookAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup","display","signInWithFacebook"],"mappings":"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","sourcesContent":["//IMPORTS\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\n//MAIN CONFIG OBJECT FROM FIREBASE TO LINK OUR APP WITH OUR FIREBASE PROJECT\nconst config = {\n  apiKey: \"AIzaSyBjUDdfvHbQXYWM4_mypKG_JE2MIm9r7mU\",\n  authDomain: \"crown-db2-79d4d.firebaseapp.com\",\n  databaseURL: \"https://crown-db2-79d4d.firebaseio.com\",\n  projectId: \"crown-db2-79d4d\",\n  storageBucket: \"crown-db2-79d4d.appspot.com\",\n  messagingSenderId: \"507911018338\",\n  appId: \"1:507911018338:web:3c3d5c1c4aa9fad1b7be3b\",\n};\n\n//CREATING USER INTO OUR FIRESTORE DATABASE\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\n\n//ADDING OUR COLLECTION TO FIRESTORE\nexport const addCollectionAndDocuments = async (\n  collectionKey,\n  objectsToAdd\n) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef);\n\n  const batch = firestore.batch();\n\n  //forEach is similar to map but does not create a new array. we want to call the function on each obj\n  objectsToAdd.forEach((obj) => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n\n  return await batch.commit();\n};\n\n//ADDING USER CARTITEMS TO FIRESTORE\n\nexport const addCartItemsCollectionAndDocuments = async (\n  collectionKey,\n  objectsToAdd\n) => {\n  const cartItemsRef = firestore.collection(collectionKey);\n  console.log(cartItemsRef);\n  const cartItemsSnapshot = cartItemsRef.get();\n  console.log(cartItemsSnapshot);\n\n  if (cartItemsRef.empty) {\n    const batch = firestore.batch();\n\n    objectsToAdd.forEach((obj) => {\n      const newDocRef = cartItemsRef.doc();\n      const newDocSnapshot = newDocRef.get();\n      console.log(newDocSnapshot);\n\n      batch.set(newDocRef, obj);\n    });\n\n    return await batch.commit();\n  }\n\n  //otherwise if it is not empty we set transactionally the docs  i.e. one after another not in batch\n};\n\n//PULLING DATA FROM FIRESTORE 'COLLECTIONS' COLLECTION INTO REDUX THEN INTO RESPECTIVE REACT COMPONENTS/CONTAINERS THAT NEED IT\nexport const convertCollectionsSnapshotToMap = (collections) => {\n  const transformedCollection = collections.docs.map((doc) => {\n    const { title, items } = doc.data();\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title, //then we pass in our title and items as we have destructured them above\n      items,\n    };\n  });\n\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\n\n//USER SESSION PERSISTENCE UTIL\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\n\nfirebase.initializeApp(config); //Initializes firebase\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\n//Gives us access to the auth Googleprovider class from authentication library\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\n\n//FACEBOOK AUTH PROVIDER\nexport const facebookProvider = new firebase.auth.FacebookAuthProvider();\n\n//prompt gives us the promp UI for user to select google account to authorise\ngoogleProvider.setCustomParameters({ prompt: \"select_account\" });\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\n//SIGN IN WITH FACEBOOK\nfacebookProvider.setCustomParameters({\n  display: \"popup\",\n});\nexport const signInWithFacebook = () => auth.signInWithPopup(facebookProvider);\n\nexport default firebase;\n\n//https://crown-db2-79d4d.firebaseapp.com/__/auth/handler\n\n//OTHER INFORMATION\n//this is where we store all firebase utilities files or methods\n//above is the config object that we import from the firebase\n//utilities library\n"]},"metadata":{},"sourceType":"module"}