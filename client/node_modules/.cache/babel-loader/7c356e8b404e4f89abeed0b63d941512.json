{"ast":null,"code":"//LEARN: A reducer is simply a function that received 2 things\n//1. it receives the current/initial state\n//2. it receives the action\n//Actions just simply have type & payload.\nimport UserActionTypes from \"./user.types\";\nconst INITIAL_STATE = {\n  currentUser: null,\n  error: null\n};\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case UserActionTypes.SIGN_IN_SUCCESS:\n      return { ...state,\n        //we spread everything else in state prop\n        currentUser: action.payload,\n        error: null //say they go an error before then they redo the signIn we want the error to be reset to null now!\n\n      };\n\n    case UserActionTypes.SIGN_IN_FAILURE:\n      return { ...state,\n        //we spread whatever other state is in here, inside of this\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default userReducer; //every single reducer gets every single action that gets fired\n//even if it does not relate to the reducer. Hence the default switch\n//back to state (parameter).","map":{"version":3,"sources":["/Users/gabrielbundala/Desktop/crown-clothing2/src/redux/user/user.reducer.js"],"names":["UserActionTypes","INITIAL_STATE","currentUser","error","userReducer","state","action","type","SIGN_IN_SUCCESS","payload","SIGN_IN_FAILURE"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,OAAOA,eAAP,MAA4B,cAA5B;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,WAAW,EAAE,IADO;AAEpBC,EAAAA,KAAK,EAAE;AAFa,CAAtB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGJ,aAAT,EAAwBK,MAAxB,KAAmC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,eAAe,CAACQ,eAArB;AACE,aAAO,EACL,GAAGH,KADE;AACK;AACVH,QAAAA,WAAW,EAAEI,MAAM,CAACG,OAFf;AAGLN,QAAAA,KAAK,EAAE,IAHF,CAGQ;;AAHR,OAAP;;AAKF,SAAKH,eAAe,CAACU,eAArB;AACE,aAAO,EACL,GAAGL,KADE;AACK;AACVF,QAAAA,KAAK,EAAEG,MAAM,CAACG;AAFT,OAAP;;AAIF;AACE,aAAOJ,KAAP;AAbJ;AAeD,CAhBD;;AAkBA,eAAeD,WAAf,C,CAEA;AACA;AACA","sourcesContent":["//LEARN: A reducer is simply a function that received 2 things\n//1. it receives the current/initial state\n//2. it receives the action\n//Actions just simply have type & payload.\n\nimport UserActionTypes from \"./user.types\";\n\nconst INITIAL_STATE = {\n  currentUser: null,\n  error: null,\n};\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case UserActionTypes.SIGN_IN_SUCCESS:\n      return {\n        ...state, //we spread everything else in state prop\n        currentUser: action.payload,\n        error: null, //say they go an error before then they redo the signIn we want the error to be reset to null now!\n      };\n    case UserActionTypes.SIGN_IN_FAILURE:\n      return {\n        ...state, //we spread whatever other state is in here, inside of this\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;\n\n//every single reducer gets every single action that gets fired\n//even if it does not relate to the reducer. Hence the default switch\n//back to state (parameter).\n"]},"metadata":{},"sourceType":"module"}