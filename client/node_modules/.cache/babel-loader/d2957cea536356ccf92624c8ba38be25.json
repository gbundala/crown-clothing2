{"ast":null,"code":"//REDUX METHODS IMPORTS\nimport { combineReducers } from \"redux\";\nimport { persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\"; //REDUCERS IMPORTS\n\nimport userReducer from \"./user/user.reducer\";\nimport cartReducer from \"./cart/cart.reducer\";\nimport directoryReducer from \"./directory/directory.reducer\";\nimport shopReducer from \"./shop/shop.reducer\";\nimport likedReducer from \"./liked/liked.reducer\";\nimport sellerReducer from \"./seller/seller.reducer\"; //REDUX PERSIST\n\nconst persistConfig = {\n  key: \"root\",\n  //essentially at what point in our reducer we want to start storing -- from the root\n  storage,\n  //this is essentiall the same as writing storage: storage\n  whitelist: [\"cart\"] //all we want to persist is the cart for now as the user is already handled by firebase\n\n}; //ROOT REDUCER\n\nconst rootReducer = combineReducers({\n  user: userReducer,\n  cart: cartReducer,\n  directory: directoryReducer,\n  shop: shopReducer,\n  liked: likedReducer,\n  seller: sellerReducer\n});\nexport default persistReducer(persistConfig, rootReducer);","map":{"version":3,"sources":["/Users/gabrielbundala/Documents/crown-clothing2/client/src/redux/root-reducer.js"],"names":["combineReducers","persistReducer","storage","userReducer","cartReducer","directoryReducer","shopReducer","likedReducer","sellerReducer","persistConfig","key","whitelist","rootReducer","user","cart","directory","shop","liked","seller"],"mappings":"AAAA;AACA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,OAAP,MAAoB,2BAApB,C,CAEA;;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,aAAP,MAA0B,yBAA1B,C,CAEA;;AACA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAE,MADe;AACP;AACbR,EAAAA,OAFoB;AAEX;AACTS,EAAAA,SAAS,EAAE,CAAC,MAAD,CAHS,CAGC;;AAHD,CAAtB,C,CAMA;;AACA,MAAMC,WAAW,GAAGZ,eAAe,CAAC;AAClCa,EAAAA,IAAI,EAAEV,WAD4B;AAElCW,EAAAA,IAAI,EAAEV,WAF4B;AAGlCW,EAAAA,SAAS,EAAEV,gBAHuB;AAIlCW,EAAAA,IAAI,EAAEV,WAJ4B;AAKlCW,EAAAA,KAAK,EAAEV,YAL2B;AAMlCW,EAAAA,MAAM,EAAEV;AAN0B,CAAD,CAAnC;AASA,eAAeP,cAAc,CAACQ,aAAD,EAAgBG,WAAhB,CAA7B","sourcesContent":["//REDUX METHODS IMPORTS\nimport { combineReducers } from \"redux\";\nimport { persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\n//REDUCERS IMPORTS\nimport userReducer from \"./user/user.reducer\";\nimport cartReducer from \"./cart/cart.reducer\";\nimport directoryReducer from \"./directory/directory.reducer\";\nimport shopReducer from \"./shop/shop.reducer\";\nimport likedReducer from \"./liked/liked.reducer\";\nimport sellerReducer from \"./seller/seller.reducer\";\n\n//REDUX PERSIST\nconst persistConfig = {\n  key: \"root\", //essentially at what point in our reducer we want to start storing -- from the root\n  storage, //this is essentiall the same as writing storage: storage\n  whitelist: [\"cart\"], //all we want to persist is the cart for now as the user is already handled by firebase\n};\n\n//ROOT REDUCER\nconst rootReducer = combineReducers({\n  user: userReducer,\n  cart: cartReducer,\n  directory: directoryReducer,\n  shop: shopReducer,\n  liked: likedReducer,\n  seller: sellerReducer,\n});\n\nexport default persistReducer(persistConfig, rootReducer);\n"]},"metadata":{},"sourceType":"module"}