{"ast":null,"code":"import { createSelector } from \"reselect\";\nimport memoize from 'lodash.memoize';\n\nconst selectShop = state => state.shop;\n\nconst selectCollections = state => state.shop.collections;\n\nexport const selectShopCollections = createSelector([selectShop], shop => shop.collections);\nexport const selectCollectionsForPreview = createSelector([selectShopCollections], collections => collections ? Object.keys(collections).map(key => collections[key]) : [] //we get the value of our collection object at that key.\n);\nexport const selectCollection = memoize(collectionUrlParam => createSelector([selectCollections], collections => collections ? collections[collectionUrlParam] : null));\nexport const selectIsCollectionFetching = createSelector([selectShop], //as we want the shop object\nshop => shop.isFetching);\nexport const selectIsCollectionsLoaded = createSelector([selectShop], shop => !!shop.collections //we call '!!' to turn any value into a boolean\n); //if our collections is loaded we get true otherwise we get false\n//we have memoized the outpout of this selector here due to the collectionUrlParam\n//In this case collectionUrlParam is a dynamic argument meaning it can change, \n//so to memoize selectCollection we actually have to memoize the whole function \n//using a memoize helper function","map":{"version":3,"sources":["/Users/gabrielbundala/Desktop/crown-clothing2/client/src/redux/shop/shop.selectors.js"],"names":["createSelector","memoize","selectShop","state","shop","selectCollections","collections","selectShopCollections","selectCollectionsForPreview","Object","keys","map","key","selectCollection","collectionUrlParam","selectIsCollectionFetching","isFetching","selectIsCollectionsLoaded"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA,OAAOC,OAAP,MAAoB,gBAApB;;AAEA,MAAMC,UAAU,GAAGC,KAAK,IAAIA,KAAK,CAACC,IAAlC;;AAEA,MAAMC,iBAAiB,GAAGF,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWE,WAA9C;;AAEA,OAAO,MAAMC,qBAAqB,GAAGP,cAAc,CAC/C,CAACE,UAAD,CAD+C,EAE/CE,IAAI,IAAIA,IAAI,CAACE,WAFkC,CAA5C;AAKP,OAAO,MAAME,2BAA2B,GAAGR,cAAc,CACrD,CAACO,qBAAD,CADqD,EAErDD,WAAW,IAAIA,WAAW,GAAGG,MAAM,CAACC,IAAP,CAAYJ,WAAZ,EAAyBK,GAAzB,CAA6BC,GAAG,IAAIN,WAAW,CAACM,GAAD,CAA/C,CAAH,GAA2D,EAFhC,CAEmC;AAFnC,CAAlD;AAKP,OAAO,MAAMC,gBAAgB,GAAGZ,OAAO,CAACa,kBAAkB,IAAId,cAAc,CACxE,CAACK,iBAAD,CADwE,EAExEC,WAAW,IAAKA,WAAW,GAAGA,WAAW,CAACQ,kBAAD,CAAd,GAAqC,IAFQ,CAArC,CAAhC;AAKP,OAAO,MAAMC,0BAA0B,GAAGf,cAAc,CACpD,CAACE,UAAD,CADoD,EACtC;AACdE,IAAI,IAAIA,IAAI,CAACY,UAFuC,CAAjD;AAKP,OAAO,MAAMC,yBAAyB,GAAGjB,cAAc,CACnD,CAACE,UAAD,CADmD,EAEnDE,IAAI,IAAI,CAAC,CAACA,IAAI,CAACE,WAFoC,CAExB;AAFwB,CAAhD,C,CAGJ;AAEH;AACA;AACA;AACA","sourcesContent":["import { createSelector } from \"reselect\";\nimport memoize from 'lodash.memoize';\n\nconst selectShop = state => state.shop;\n\nconst selectCollections = state => state.shop.collections; \n\nexport const selectShopCollections = createSelector(\n    [selectShop],\n    shop => shop.collections\n);\n\nexport const selectCollectionsForPreview = createSelector(\n    [selectShopCollections],\n    collections => collections ? Object.keys(collections).map(key => collections[key]) : [] //we get the value of our collection object at that key.\n);\n\nexport const selectCollection = memoize(collectionUrlParam => createSelector(\n    [selectCollections],\n    collections => (collections ? collections[collectionUrlParam] : null)\n));\n\nexport const selectIsCollectionFetching = createSelector(\n    [selectShop], //as we want the shop object\n    shop => shop.isFetching\n);\n\nexport const selectIsCollectionsLoaded = createSelector(\n    [selectShop],\n    shop => !!shop.collections //we call '!!' to turn any value into a boolean\n); //if our collections is loaded we get true otherwise we get false\n\n//we have memoized the outpout of this selector here due to the collectionUrlParam\n//In this case collectionUrlParam is a dynamic argument meaning it can change, \n//so to memoize selectCollection we actually have to memoize the whole function \n//using a memoize helper function"]},"metadata":{},"sourceType":"module"}