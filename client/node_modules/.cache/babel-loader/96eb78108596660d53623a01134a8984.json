{"ast":null,"code":"//IMPORTS\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\"; //MAIN CONFIG OBJECT FROM FIREBASE TO LINK OUR APP WITH OUR FIREBASE PROJECT\n\nconst config = {\n  apiKey: \"AIzaSyBjUDdfvHbQXYWM4_mypKG_JE2MIm9r7mU\",\n  authDomain: \"crown-db2-79d4d.firebaseapp.com\",\n  databaseURL: \"https://crown-db2-79d4d.firebaseio.com\",\n  projectId: \"crown-db2-79d4d\",\n  storageBucket: \"crown-db2-79d4d.appspot.com\",\n  messagingSenderId: \"507911018338\",\n  appId: \"1:507911018338:web:3c3d5c1c4aa9fad1b7be3b\"\n}; //CREATING USER INTO OUR FIRESTORE DATABASE\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n}; //ADDING SHOP COLLECTION DATA AGAIN AFTER MISTAKENLY DELETINGðŸ˜œ\n\nexport const addShopCollectionsAndDocuments = async (collectionKey, objectsToAdd) => {\n  const shopCollectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newShopDocRef = shopCollectionRef.doc();\n    batch.set(newShopDocRef, obj);\n  });\n  await batch.commit();\n}; //ADDING OUR COLLECTION TO FIRESTORE\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef);\n  const batch = firestore.batch(); //forEach is similar to map but does not create a new array. we want to call the function on each obj\n\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n}; //SELLER ADDING INDIVIDUAL DOCUMENTS OF ITEMS TO SHOP COLLECTION IN FIRESTORE\n\nexport const addIndividualShopDocumentItems = async (collectionKey, clothesDocRef, name, price, imageUrl) => {\n  console.log(`firebase method called for ${clothesDocRef}: `, objectToAdd); // const { imageUrl, name, price, collection } = objectToAdd;\n\n  const collectionRef = firestore.collection(collectionKey);\n  const documentRef = collectionRef.doc(\"CUbKnZZ0qf0055Fz4K9h\");\n  await documentRef.update({\n    items: firebase.firestore.FieldValue.arrayUnion({\n      id: 100,\n      imageUrl,\n      name,\n      price\n    })\n  });\n}; //ADDING USER CARTITEMS TO FIRESTORE\n\nexport const addCartItemsCollectionAndDocuments = async (cartCollectionKey, cartDocsToAdd, user) => {\n  console.log(\"who is logged in?\", user.id);\n  const cartItemsCollectionRef = firestore.collection(`users/${user.id}/${cartCollectionKey}`);\n  console.log(cartItemsCollectionRef);\n  const cartItemsCollectionSnapshot = cartItemsCollectionRef.get();\n  const cartItemsDocSnapshotObjects = (await cartItemsCollectionSnapshot).docs; //code checks whether all the items exists firebase\n\n  const existingCartItemDocs = cartDocsToAdd.every(obj => cartItemsDocSnapshotObjects.find(docObj => docObj.data().id === obj.id)); //Run this code only if the cartItems collection is empty\n\n  if ((await cartItemsCollectionSnapshot).empty) {\n    const cartBatch = firestore.batch();\n    cartDocsToAdd.forEach(obj => {\n      const newCartDocRef = cartItemsCollectionRef.doc();\n      cartBatch.set(newCartDocRef, obj);\n    });\n    return await cartBatch.commit();\n  } //Run this code if we need to update the existing cartItemDoc\n  //FIXME: This code always run even if there is no new qty to update, rectify\n\n\n  if (existingCartItemDocs) {\n    return cartItemsDocSnapshotObjects.forEach(async docObj => {\n      const existingCartDocRef = firestore.doc(`users/${user.id}/${cartCollectionKey}/${docObj.id}`);\n      cartDocsToAdd.map(async obj => {\n        if (docObj.data().id === obj.id) {\n          try {\n            return await existingCartDocRef.update({ ...docObj.data(),\n              quantity: obj.quantity\n            });\n          } catch (error) {\n            console.log(\"error in setting qty:\", error.message);\n          }\n        }\n      });\n    });\n  } //Run this code if the is a new item to be added in firebase\n\n\n  return cartDocsToAdd.map(async obj => {\n    if (cartItemsDocSnapshotObjects.find(docObj => docObj.data().id === obj.id)) return;\n\n    try {\n      return await cartItemsCollectionRef.add(obj);\n    } catch (error) {\n      console.log(\"error in adding new cartItem in firestore\", error);\n    }\n  }); //TODO: Add a conditional to remove an item from firebase that had been removed from the client store\n}; //PULLING DATA FROM FIRESTORE 'COLLECTIONS' COLLECTION INTO REDUX THEN INTO RESPECTIVE REACT COMPONENTS/CONTAINERS THAT NEED IT\n\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      //then we pass in our title and items as we have destructured them above\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n}; //TODO: PULLING DATA FROM CARTITEMS COLLECTION\n\nexport const convertCartCollectionSnapshotToMap = collection => {\n  const transformedCollection = collection.docs.map(doc => {\n    return { ...doc.data()\n    };\n  });\n  return transformedCollection.reduce((accumulator, documents) => {\n    return [...accumulator, documents];\n  }, []);\n}; //USER SESSION PERSISTENCE UTIL\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nfirebase.initializeApp(config); //Initializes firebase\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); //Gives us access to the auth Googleprovider class from authentication library\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider(); //FACEBOOK AUTH PROVIDER\n\nexport const facebookProvider = new firebase.auth.FacebookAuthProvider(); //prompt gives us the promp UI for user to select google account to authorise\n\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider); //SIGN IN WITH FACEBOOK\n\nfacebookProvider.setCustomParameters({\n  display: \"popup\"\n});\nexport const signInWithFacebook = () => auth.signInWithPopup(facebookProvider);\nexport default firebase; //https://crown-db2-79d4d.firebaseapp.com/__/auth/handler\n//OTHER INFORMATION\n//this is where we store all firebase utilities files or methods\n//above is the config object that we import from the firebase\n//utilities library","map":{"version":3,"sources":["/Users/gabrielbundala/Documents/crown-clothing2/client/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addShopCollectionsAndDocuments","collectionKey","objectsToAdd","shopCollectionRef","collection","batch","forEach","obj","newShopDocRef","commit","addCollectionAndDocuments","collectionRef","newDocRef","addIndividualShopDocumentItems","clothesDocRef","name","price","imageUrl","objectToAdd","documentRef","update","items","FieldValue","arrayUnion","id","addCartItemsCollectionAndDocuments","cartCollectionKey","cartDocsToAdd","user","cartItemsCollectionRef","cartItemsCollectionSnapshot","cartItemsDocSnapshotObjects","docs","existingCartItemDocs","every","find","docObj","data","empty","cartBatch","newCartDocRef","existingCartDocRef","map","quantity","add","convertCollectionsSnapshotToMap","collections","transformedCollection","title","routeName","encodeURI","toLowerCase","reduce","accumulator","convertCartCollectionSnapshotToMap","documents","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","initializeApp","googleProvider","GoogleAuthProvider","facebookProvider","FacebookAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup","display","signInWithFacebook"],"mappings":"AAAA;AACA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP,C,CAEA;;AACA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,iCAFC;AAGbC,EAAAA,WAAW,EAAE,wCAHA;AAIbC,EAAAA,SAAS,EAAE,iBAJE;AAKbC,EAAAA,aAAa,EAAE,6BALF;AAMbC,EAAAA,iBAAiB,EAAE,cANN;AAObC,EAAAA,KAAK,EAAE;AAPM,CAAf,C,CAUA;;AACA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AAEA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AAEA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBV,QAA/B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACF,YAAMV,OAAO,CAACW,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGV;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAOa,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACD;AACF;;AAED,SAAOf,OAAP;AACD,CAxBM,C,CA0BP;;AACA,OAAO,MAAMgB,8BAA8B,GAAG,OAC5CC,aAD4C,EAE5CC,YAF4C,KAGzC;AACH,QAAMC,iBAAiB,GAAGlB,SAAS,CAACmB,UAAV,CAAqBH,aAArB,CAA1B;AAEA,QAAMI,KAAK,GAAGpB,SAAS,CAACoB,KAAV,EAAd;AAEAH,EAAAA,YAAY,CAACI,OAAb,CAAsBC,GAAD,IAAS;AAC5B,UAAMC,aAAa,GAAGL,iBAAiB,CAACjB,GAAlB,EAAtB;AACAmB,IAAAA,KAAK,CAACV,GAAN,CAAUa,aAAV,EAAyBD,GAAzB;AACD,GAHD;AAKA,QAAMF,KAAK,CAACI,MAAN,EAAN;AACD,CAdM,C,CAgBP;;AACA,OAAO,MAAMC,yBAAyB,GAAG,OACvCT,aADuC,EAEvCC,YAFuC,KAGpC;AACH,QAAMS,aAAa,GAAG1B,SAAS,CAACmB,UAAV,CAAqBH,aAArB,CAAtB;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAYa,aAAZ;AAEA,QAAMN,KAAK,GAAGpB,SAAS,CAACoB,KAAV,EAAd,CAJG,CAMH;;AACAH,EAAAA,YAAY,CAACI,OAAb,CAAsBC,GAAD,IAAS;AAC5B,UAAMK,SAAS,GAAGD,aAAa,CAACzB,GAAd,EAAlB;AACAmB,IAAAA,KAAK,CAACV,GAAN,CAAUiB,SAAV,EAAqBL,GAArB;AACD,GAHD;AAKA,SAAO,MAAMF,KAAK,CAACI,MAAN,EAAb;AACD,CAhBM,C,CAkBP;;AACA,OAAO,MAAMI,8BAA8B,GAAG,OAC5CZ,aAD4C,EAE5Ca,aAF4C,EAG5CC,IAH4C,EAI5CC,KAJ4C,EAK5CC,QAL4C,KAMzC;AACHpB,EAAAA,OAAO,CAACC,GAAR,CAAa,8BAA6BgB,aAAc,IAAxD,EAA6DI,WAA7D,EADG,CAEH;;AAEA,QAAMP,aAAa,GAAG1B,SAAS,CAACmB,UAAV,CAAqBH,aAArB,CAAtB;AACA,QAAMkB,WAAW,GAAGR,aAAa,CAACzB,GAAd,CAAkB,sBAAlB,CAApB;AAEA,QAAMiC,WAAW,CAACC,MAAZ,CAAmB;AACvBC,IAAAA,KAAK,EAAEjD,QAAQ,CAACa,SAAT,CAAmBqC,UAAnB,CAA8BC,UAA9B,CAAyC;AAC9CC,MAAAA,EAAE,EAAE,GAD0C;AAE9CP,MAAAA,QAF8C;AAG9CF,MAAAA,IAH8C;AAI9CC,MAAAA;AAJ8C,KAAzC;AADgB,GAAnB,CAAN;AAQD,CArBM,C,CAuBP;;AACA,OAAO,MAAMS,kCAAkC,GAAG,OAChDC,iBADgD,EAEhDC,aAFgD,EAGhDC,IAHgD,KAI7C;AACH/B,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC8B,IAAI,CAACJ,EAAtC;AACA,QAAMK,sBAAsB,GAAG5C,SAAS,CAACmB,UAAV,CAC5B,SAAQwB,IAAI,CAACJ,EAAG,IAAGE,iBAAkB,EADT,CAA/B;AAGA7B,EAAAA,OAAO,CAACC,GAAR,CAAY+B,sBAAZ;AACA,QAAMC,2BAA2B,GAAGD,sBAAsB,CAACxC,GAAvB,EAApC;AACA,QAAM0C,2BAA2B,GAAG,CAAC,MAAMD,2BAAP,EAAoCE,IAAxE,CAPG,CASH;;AACA,QAAMC,oBAAoB,GAAGN,aAAa,CAACO,KAAd,CAAqB3B,GAAD,IAC/CwB,2BAA2B,CAACI,IAA5B,CAAkCC,MAAD,IAAYA,MAAM,CAACC,IAAP,GAAcb,EAAd,KAAqBjB,GAAG,CAACiB,EAAtE,CAD2B,CAA7B,CAVG,CAcH;;AACA,MAAI,CAAC,MAAMM,2BAAP,EAAoCQ,KAAxC,EAA+C;AAC7C,UAAMC,SAAS,GAAGtD,SAAS,CAACoB,KAAV,EAAlB;AAEAsB,IAAAA,aAAa,CAACrB,OAAd,CAAuBC,GAAD,IAAS;AAC7B,YAAMiC,aAAa,GAAGX,sBAAsB,CAAC3C,GAAvB,EAAtB;AACAqD,MAAAA,SAAS,CAAC5C,GAAV,CAAc6C,aAAd,EAA6BjC,GAA7B;AACD,KAHD;AAIA,WAAO,MAAMgC,SAAS,CAAC9B,MAAV,EAAb;AACD,GAvBE,CAyBH;AACA;;;AACA,MAAIwB,oBAAJ,EAA0B;AACxB,WAAOF,2BAA2B,CAACzB,OAA5B,CAAoC,MAAO8B,MAAP,IAAkB;AAC3D,YAAMK,kBAAkB,GAAGxD,SAAS,CAACC,GAAV,CACxB,SAAQ0C,IAAI,CAACJ,EAAG,IAAGE,iBAAkB,IAAGU,MAAM,CAACZ,EAAG,EAD1B,CAA3B;AAIAG,MAAAA,aAAa,CAACe,GAAd,CAAkB,MAAOnC,GAAP,IAAe;AAC/B,YAAI6B,MAAM,CAACC,IAAP,GAAcb,EAAd,KAAqBjB,GAAG,CAACiB,EAA7B,EAAiC;AAC/B,cAAI;AACF,mBAAO,MAAMiB,kBAAkB,CAACrB,MAAnB,CAA0B,EACrC,GAAGgB,MAAM,CAACC,IAAP,EADkC;AAErCM,cAAAA,QAAQ,EAAEpC,GAAG,CAACoC;AAFuB,aAA1B,CAAb;AAID,WALD,CAKE,OAAO/C,KAAP,EAAc;AACdC,YAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCF,KAAK,CAACG,OAA3C;AACD;AACF;AACF,OAXD;AAYD,KAjBM,CAAP;AAkBD,GA9CE,CAgDH;;;AACA,SAAO4B,aAAa,CAACe,GAAd,CAAkB,MAAOnC,GAAP,IAAe;AACtC,QACEwB,2BAA2B,CAACI,IAA5B,CAAkCC,MAAD,IAAYA,MAAM,CAACC,IAAP,GAAcb,EAAd,KAAqBjB,GAAG,CAACiB,EAAtE,CADF,EAGE;;AAEF,QAAI;AACF,aAAO,MAAMK,sBAAsB,CAACe,GAAvB,CAA2BrC,GAA3B,CAAb;AACD,KAFD,CAEE,OAAOX,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ,EAAyDF,KAAzD;AACD;AACF,GAXM,CAAP,CAjDG,CA8DH;AACD,CAnEM,C,CAqEP;;AACA,OAAO,MAAMiD,+BAA+B,GAAIC,WAAD,IAAiB;AAC9D,QAAMC,qBAAqB,GAAGD,WAAW,CAACd,IAAZ,CAAiBU,GAAjB,CAAsBxD,GAAD,IAAS;AAC1D,UAAM;AAAE8D,MAAAA,KAAF;AAAS3B,MAAAA;AAAT,QAAmBnC,GAAG,CAACmD,IAAJ,EAAzB;AAEA,WAAO;AACLY,MAAAA,SAAS,EAAEC,SAAS,CAACF,KAAK,CAACG,WAAN,EAAD,CADf;AAEL3B,MAAAA,EAAE,EAAEtC,GAAG,CAACsC,EAFH;AAGLwB,MAAAA,KAHK;AAGE;AACP3B,MAAAA;AAJK,KAAP;AAMD,GAT6B,CAA9B;AAWA,SAAO0B,qBAAqB,CAACK,MAAtB,CAA6B,CAACC,WAAD,EAAcjD,UAAd,KAA6B;AAC/DiD,IAAAA,WAAW,CAACjD,UAAU,CAAC4C,KAAX,CAAiBG,WAAjB,EAAD,CAAX,GAA8C/C,UAA9C;AACA,WAAOiD,WAAP;AACD,GAHM,EAGJ,EAHI,CAAP;AAID,CAhBM,C,CAkBP;;AACA,OAAO,MAAMC,kCAAkC,GAAIlD,UAAD,IAAgB;AAChE,QAAM2C,qBAAqB,GAAG3C,UAAU,CAAC4B,IAAX,CAAgBU,GAAhB,CAAqBxD,GAAD,IAAS;AACzD,WAAO,EACL,GAAGA,GAAG,CAACmD,IAAJ;AADE,KAAP;AAGD,GAJ6B,CAA9B;AAMA,SAAOU,qBAAqB,CAACK,MAAtB,CAA6B,CAACC,WAAD,EAAcE,SAAd,KAA4B;AAC9D,WAAO,CAAC,GAAGF,WAAJ,EAAiBE,SAAjB,CAAP;AACD,GAFM,EAEJ,EAFI,CAAP;AAGD,CAVM,C,CAYP;;AACA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAClC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMC,WAAW,GAAGC,IAAI,CAACC,kBAAL,CAAyBhF,QAAD,IAAc;AACxD8E,MAAAA,WAAW;AACXF,MAAAA,OAAO,CAAC5E,QAAD,CAAP;AACD,KAHmB,EAGjB6E,MAHiB,CAApB;AAID,GALM,CAAP;AAMD,CAPM;AASPvF,QAAQ,CAAC2F,aAAT,CAAuB1F,MAAvB,E,CAAgC;;AAEhC,OAAO,MAAMwF,IAAI,GAAGzF,QAAQ,CAACyF,IAAT,EAAb;AACP,OAAO,MAAM5E,SAAS,GAAGb,QAAQ,CAACa,SAAT,EAAlB,C,CAEP;;AACA,OAAO,MAAM+E,cAAc,GAAG,IAAI5F,QAAQ,CAACyF,IAAT,CAAcI,kBAAlB,EAAvB,C,CAEP;;AACA,OAAO,MAAMC,gBAAgB,GAAG,IAAI9F,QAAQ,CAACyF,IAAT,CAAcM,oBAAlB,EAAzB,C,CAEP;;AACAH,cAAc,CAACI,mBAAf,CAAmC;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAAnC;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAMT,IAAI,CAACU,eAAL,CAAqBP,cAArB,CAA/B,C,CAEP;;AACAE,gBAAgB,CAACE,mBAAjB,CAAqC;AACnCI,EAAAA,OAAO,EAAE;AAD0B,CAArC;AAGA,OAAO,MAAMC,kBAAkB,GAAG,MAAMZ,IAAI,CAACU,eAAL,CAAqBL,gBAArB,CAAjC;AAEP,eAAe9F,QAAf,C,CAEA;AAEA;AACA;AACA;AACA","sourcesContent":["//IMPORTS\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\n//MAIN CONFIG OBJECT FROM FIREBASE TO LINK OUR APP WITH OUR FIREBASE PROJECT\nconst config = {\n  apiKey: \"AIzaSyBjUDdfvHbQXYWM4_mypKG_JE2MIm9r7mU\",\n  authDomain: \"crown-db2-79d4d.firebaseapp.com\",\n  databaseURL: \"https://crown-db2-79d4d.firebaseio.com\",\n  projectId: \"crown-db2-79d4d\",\n  storageBucket: \"crown-db2-79d4d.appspot.com\",\n  messagingSenderId: \"507911018338\",\n  appId: \"1:507911018338:web:3c3d5c1c4aa9fad1b7be3b\",\n};\n\n//CREATING USER INTO OUR FIRESTORE DATABASE\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\n\n//ADDING SHOP COLLECTION DATA AGAIN AFTER MISTAKENLY DELETINGðŸ˜œ\nexport const addShopCollectionsAndDocuments = async (\n  collectionKey,\n  objectsToAdd\n) => {\n  const shopCollectionRef = firestore.collection(collectionKey);\n\n  const batch = firestore.batch();\n\n  objectsToAdd.forEach((obj) => {\n    const newShopDocRef = shopCollectionRef.doc();\n    batch.set(newShopDocRef, obj);\n  });\n\n  await batch.commit();\n};\n\n//ADDING OUR COLLECTION TO FIRESTORE\nexport const addCollectionAndDocuments = async (\n  collectionKey,\n  objectsToAdd\n) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef);\n\n  const batch = firestore.batch();\n\n  //forEach is similar to map but does not create a new array. we want to call the function on each obj\n  objectsToAdd.forEach((obj) => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n\n  return await batch.commit();\n};\n\n//SELLER ADDING INDIVIDUAL DOCUMENTS OF ITEMS TO SHOP COLLECTION IN FIRESTORE\nexport const addIndividualShopDocumentItems = async (\n  collectionKey,\n  clothesDocRef,\n  name,\n  price,\n  imageUrl\n) => {\n  console.log(`firebase method called for ${clothesDocRef}: `, objectToAdd);\n  // const { imageUrl, name, price, collection } = objectToAdd;\n\n  const collectionRef = firestore.collection(collectionKey);\n  const documentRef = collectionRef.doc(\"CUbKnZZ0qf0055Fz4K9h\");\n\n  await documentRef.update({\n    items: firebase.firestore.FieldValue.arrayUnion({\n      id: 100,\n      imageUrl,\n      name,\n      price,\n    }),\n  });\n};\n\n//ADDING USER CARTITEMS TO FIRESTORE\nexport const addCartItemsCollectionAndDocuments = async (\n  cartCollectionKey,\n  cartDocsToAdd,\n  user\n) => {\n  console.log(\"who is logged in?\", user.id);\n  const cartItemsCollectionRef = firestore.collection(\n    `users/${user.id}/${cartCollectionKey}`\n  );\n  console.log(cartItemsCollectionRef);\n  const cartItemsCollectionSnapshot = cartItemsCollectionRef.get();\n  const cartItemsDocSnapshotObjects = (await cartItemsCollectionSnapshot).docs;\n\n  //code checks whether all the items exists firebase\n  const existingCartItemDocs = cartDocsToAdd.every((obj) =>\n    cartItemsDocSnapshotObjects.find((docObj) => docObj.data().id === obj.id)\n  );\n\n  //Run this code only if the cartItems collection is empty\n  if ((await cartItemsCollectionSnapshot).empty) {\n    const cartBatch = firestore.batch();\n\n    cartDocsToAdd.forEach((obj) => {\n      const newCartDocRef = cartItemsCollectionRef.doc();\n      cartBatch.set(newCartDocRef, obj);\n    });\n    return await cartBatch.commit();\n  }\n\n  //Run this code if we need to update the existing cartItemDoc\n  //FIXME: This code always run even if there is no new qty to update, rectify\n  if (existingCartItemDocs) {\n    return cartItemsDocSnapshotObjects.forEach(async (docObj) => {\n      const existingCartDocRef = firestore.doc(\n        `users/${user.id}/${cartCollectionKey}/${docObj.id}`\n      );\n\n      cartDocsToAdd.map(async (obj) => {\n        if (docObj.data().id === obj.id) {\n          try {\n            return await existingCartDocRef.update({\n              ...docObj.data(),\n              quantity: obj.quantity,\n            });\n          } catch (error) {\n            console.log(\"error in setting qty:\", error.message);\n          }\n        }\n      });\n    });\n  }\n\n  //Run this code if the is a new item to be added in firebase\n  return cartDocsToAdd.map(async (obj) => {\n    if (\n      cartItemsDocSnapshotObjects.find((docObj) => docObj.data().id === obj.id)\n    )\n      return;\n\n    try {\n      return await cartItemsCollectionRef.add(obj);\n    } catch (error) {\n      console.log(\"error in adding new cartItem in firestore\", error);\n    }\n  });\n\n  //TODO: Add a conditional to remove an item from firebase that had been removed from the client store\n};\n\n//PULLING DATA FROM FIRESTORE 'COLLECTIONS' COLLECTION INTO REDUX THEN INTO RESPECTIVE REACT COMPONENTS/CONTAINERS THAT NEED IT\nexport const convertCollectionsSnapshotToMap = (collections) => {\n  const transformedCollection = collections.docs.map((doc) => {\n    const { title, items } = doc.data();\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title, //then we pass in our title and items as we have destructured them above\n      items,\n    };\n  });\n\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\n\n//TODO: PULLING DATA FROM CARTITEMS COLLECTION\nexport const convertCartCollectionSnapshotToMap = (collection) => {\n  const transformedCollection = collection.docs.map((doc) => {\n    return {\n      ...doc.data(),\n    };\n  });\n\n  return transformedCollection.reduce((accumulator, documents) => {\n    return [...accumulator, documents];\n  }, []);\n};\n\n//USER SESSION PERSISTENCE UTIL\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\n\nfirebase.initializeApp(config); //Initializes firebase\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\n//Gives us access to the auth Googleprovider class from authentication library\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\n\n//FACEBOOK AUTH PROVIDER\nexport const facebookProvider = new firebase.auth.FacebookAuthProvider();\n\n//prompt gives us the promp UI for user to select google account to authorise\ngoogleProvider.setCustomParameters({ prompt: \"select_account\" });\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\n//SIGN IN WITH FACEBOOK\nfacebookProvider.setCustomParameters({\n  display: \"popup\",\n});\nexport const signInWithFacebook = () => auth.signInWithPopup(facebookProvider);\n\nexport default firebase;\n\n//https://crown-db2-79d4d.firebaseapp.com/__/auth/handler\n\n//OTHER INFORMATION\n//this is where we store all firebase utilities files or methods\n//above is the config object that we import from the firebase\n//utilities library\n"]},"metadata":{},"sourceType":"module"}