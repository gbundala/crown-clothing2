{"ast":null,"code":"//this is where we store all firebase utilities files or methods\n//below is the config object that we import from the firebase\n//utilities library\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyBjUDdfvHbQXYWM4_mypKG_JE2MIm9r7mU\",\n  authDomain: \"crown-db2-79d4d.firebaseapp.com\",\n  databaseURL: \"https://crown-db2-79d4d.firebaseio.com\",\n  projectId: \"crown-db2-79d4d\",\n  storageBucket: \"crown-db2-79d4d.appspot.com\",\n  messagingSenderId: \"507911018338\",\n  appId: \"1:507911018338:web:3c3d5c1c4aa9fad1b7be3b\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef);\n  const batch = firestore.batch(); //forEach does not create a new array. we want to call the function on each obj\n\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      //then we pass in our title and items as we have destructured them above\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nfirebase.initializeApp(config); //check this\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); //Gives us access to the auth provider class from authentication library\n\nconst provider = new firebase.auth.GoogleAuthProvider(); //prompt gives us the promp UI for user to select google account to authorise\n\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/gabrielbundala/Desktop/crown-clothing2/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["//this is where we store all firebase utilities files or methods\n//below is the config object that we import from the firebase\n//utilities library\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n    apiKey: \"AIzaSyBjUDdfvHbQXYWM4_mypKG_JE2MIm9r7mU\",\n    authDomain: \"crown-db2-79d4d.firebaseapp.com\",\n    databaseURL: \"https://crown-db2-79d4d.firebaseio.com\",\n    projectId: \"crown-db2-79d4d\",\n    storageBucket: \"crown-db2-79d4d.appspot.com\",\n    messagingSenderId: \"507911018338\",\n    appId: \"1:507911018338:web:3c3d5c1c4aa9fad1b7be3b\"\n};\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n    if (!userAuth) return;\n\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n    const snapShot = await userRef.get();\n\n    if(!snapShot.exists) {\n        const { displayName, email } = userAuth;\n        const createdAt = new Date();\n\n        try {\n            await userRef.set({\n                displayName,\n                email,\n                createdAt,\n                ...additionalData\n            })\n        } catch(error) {\n            console.log('error creating user', error.message);\n        }\n    }\n\n    return userRef;\n};\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n    const collectionRef = firestore.collection(collectionKey);\n    console.log(collectionRef);\n\n    const batch = firestore.batch();\n\n    //forEach does not create a new array. we want to call the function on each obj\n    objectsToAdd.forEach(obj => {\n        const newDocRef = collectionRef.doc();\n        batch.set(newDocRef, obj);\n    });\n\n    return await batch.commit();\n}\n\nexport const convertCollectionsSnapshotToMap = (collections) => {\n    const transformedCollection = collections.docs.map(doc => {\n        const { title, items} = doc.data();\n\n        return {\n            routeName: encodeURI(title.toLowerCase()),\n            id: doc.id,\n            title,//then we pass in our title and items as we have destructured them above\n            items\n        }\n    });\n\n    return transformedCollection.reduce((accumulator, collection) => {\n        accumulator[collection.title.toLowerCase()] = collection;\n        return accumulator;\n    }, {});\n}\n\nfirebase.initializeApp(config);//check this\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\n//Gives us access to the auth provider class from authentication library\nconst provider = new firebase.auth.GoogleAuthProvider();\n//prompt gives us the promp UI for user to select google account to authorise\nprovider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}