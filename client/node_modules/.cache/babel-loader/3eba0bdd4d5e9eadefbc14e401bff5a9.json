{"ast":null,"code":"var _jsxFileName = \"/Users/gabrielbundala/Desktop/crown-clothing2/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport HomePage from \"./pages/homepage/homepage.component\";\nimport Header from \"./components/header/header.component\";\nimport ShopPage from \"./pages/shop/shop.component\";\nimport SignInAndSignUpPage from \"./pages/sign-in-and-sign-up/sign-in-and-sign-up.component\";\nimport CheckoutPage from \"./pages/checkout/checkout.component\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport { selectCurrentUser } from \"./redux/user/user.selector\";\nimport { checkUserSession } from \"./redux/user/user.actions\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.unsubscribeFromAuth = null;\n  }\n\n  componentDidMount() {\n    const {\n      checkUserSession\n    } = this.props;\n    checkUserSession();\n  } // componentDidMount() {\n  //   const { setCurrentUser } = this.props\n  //   //below is an open subscription which is basically an open\n  //   //messaging system btn our App and our FirebaseApp.\n  //   //We don't have to fetch everytime our component mounts\n  //   //as long as the user session is still on it connects automatically.\n  //   this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n  //     if (userAuth) {\n  //       const userRef = await createUserProfileDocument(userAuth);\n  //       //below we use this.props.setCurrentUser inplace of this.setState\n  //       //as we no longer have the constructor. Note: this.props is destructured above!\n  //       userRef.onSnapshot(snapShot => {\n  //         setCurrentUser({\n  //           id: snapShot.id,\n  //           ...snapShot.data()//STUDYME!\n  //         });\n  //       });\n  //     }\n  //     setCurrentUser(userAuth);\n  //     // addCollectionAndDocuments(\n  //     //   'collections',\n  //     //   // collectionsArray.map(({ title, items }) => ({ title, items }))\n  //     // );\n  //   });\n  // }\n  //as we don't want to have any memory leaks in our app,\n  //the subscription will close when the component unmounts\n\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n  }\n\n  render() {\n    const {\n      currentUser\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: HomePage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/shop\",\n      component: ShopPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/checkout\",\n      component: CheckoutPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/signin\",\n      render: () => currentUser ? /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(SignInAndSignUpPage, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 51\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser\n});\n\nconst mapDispatchToProps = dispatch => ({\n  checkUserSession: () => dispatch(checkUserSession())\n}); //STUDYME: This was the initial implementation before reselect\n//Reselect is a library for memoization so as to cache the output\n//here in order not to fire mapStateToProps each time the App is re-rendered\n//even if it has not been directly triggered\n// const mapStateToProps = ({ user }) => ({\n//   currentUser: user.currentUser//we get access to this.props.currrentUser after putting into connect below\n// });\n//No need for mapDispatchToProps for setting current user as our Saga is now handling our setCurrent user\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App); //connect has two arguments\n//mapDispatchToProps is the second argument\n//we have put the first argument to null as we dont need\n//mapStateToProps in Appjs as there is no where in here\n//that we have used the state of the current user\n//hence what we only need here is to send the update of the state\n//to the 'user.actions.js'\n//we dont need the constructor anymore, hence we have remove it!\n//UPDATE: Initially we had null as the first argument in connect()\n//but since we have implemented React Router Redirect to have\n//the app remove the signIn page after use signs in we have\n//therefore needed state in the Appjs file there the\n//mapStateToProp function and implementation.","map":{"version":3,"sources":["/Users/gabrielbundala/Desktop/crown-clothing2/src/App.js"],"names":["React","Component","HomePage","Header","ShopPage","SignInAndSignUpPage","CheckoutPage","Route","Switch","Redirect","connect","createStructuredSelector","selectCurrentUser","checkUserSession","App","unsubscribeFromAuth","componentDidMount","props","componentWillUnmount","render","currentUser","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAO,WAAP;AACA,OAAOC,QAAP,MAAqB,qCAArB;AACA,OAAOC,MAAP,MAAmB,sCAAnB;AACA,OAAOC,QAAP,MAAqB,6BAArB;AACA,OAAOC,mBAAP,MAAgC,2DAAhC;AACA,OAAOC,YAAP,MAAyB,qCAAzB;AAEA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,kBAAxC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,iBAAT,QAAkC,4BAAlC;AACA,SAASC,gBAAT,QAAiC,2BAAjC;;AAEA,MAAMC,GAAN,SAAkBb,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1Bc,mBAD0B,GACJ,IADI;AAAA;;AAG1BC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEH,MAAAA;AAAF,QAAuB,KAAKI,KAAlC;AACAJ,IAAAA,gBAAgB;AACjB,GANyB,CAQ1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;;;AACAK,EAAAA,oBAAoB,GAAG;AACrB,SAAKH,mBAAL;AACD;;AAEDI,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAkB,KAAKH,KAA7B;AACA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,GAAlB;AAAsB,MAAA,SAAS,EAAEf,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAEE,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,WAAlB;AAA8B,MAAA,SAAS,EAAEE,YAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,eAIE,oBAAC,KAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,EAAC,SAFP;AAGE,MAAA,MAAM,EAAE,MACNc,WAAW,gBAAG,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAH,gBAAyB,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CAFF,CADF;AAiBD;;AA9DyB;;AAiE5B,MAAMC,eAAe,GAAGV,wBAAwB,CAAC;AAC/CS,EAAAA,WAAW,EAAER;AADkC,CAAD,CAAhD;;AAIA,MAAMU,kBAAkB,GAAIC,QAAD,KAAe;AACxCV,EAAAA,gBAAgB,EAAE,MAAMU,QAAQ,CAACV,gBAAgB,EAAjB;AADQ,CAAf,CAA3B,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA,eAAeH,OAAO,CAACW,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CR,GAA7C,CAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./App.css\";\nimport HomePage from \"./pages/homepage/homepage.component\";\nimport Header from \"./components/header/header.component\";\nimport ShopPage from \"./pages/shop/shop.component\";\nimport SignInAndSignUpPage from \"./pages/sign-in-and-sign-up/sign-in-and-sign-up.component\";\nimport CheckoutPage from \"./pages/checkout/checkout.component\";\n\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport { selectCurrentUser } from \"./redux/user/user.selector\";\nimport { checkUserSession } from \"./redux/user/user.actions\";\n\nclass App extends Component {\n  unsubscribeFromAuth = null;\n\n  componentDidMount() {\n    const { checkUserSession } = this.props;\n    checkUserSession();\n  }\n\n  // componentDidMount() {\n  //   const { setCurrentUser } = this.props\n  //   //below is an open subscription which is basically an open\n  //   //messaging system btn our App and our FirebaseApp.\n  //   //We don't have to fetch everytime our component mounts\n  //   //as long as the user session is still on it connects automatically.\n  //   this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n  //     if (userAuth) {\n  //       const userRef = await createUserProfileDocument(userAuth);\n\n  //       //below we use this.props.setCurrentUser inplace of this.setState\n  //       //as we no longer have the constructor. Note: this.props is destructured above!\n  //       userRef.onSnapshot(snapShot => {\n  //         setCurrentUser({\n  //           id: snapShot.id,\n  //           ...snapShot.data()//STUDYME!\n  //         });\n  //       });\n  //     }\n\n  //     setCurrentUser(userAuth);\n  //     // addCollectionAndDocuments(\n  //     //   'collections',\n  //     //   // collectionsArray.map(({ title, items }) => ({ title, items }))\n  //     // );\n\n  //   });\n  // }\n\n  //as we don't want to have any memory leaks in our app,\n  //the subscription will close when the component unmounts\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n  }\n\n  render() {\n    const { currentUser } = this.props;\n    return (\n      <div>\n        <Header />\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route path=\"/shop\" component={ShopPage} />\n          <Route exact path=\"/checkout\" component={CheckoutPage} />\n          <Route\n            exact\n            path=\"/signin\"\n            render={() =>\n              currentUser ? <Redirect to=\"/\" /> : <SignInAndSignUpPage />\n            }\n          />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  checkUserSession: () => dispatch(checkUserSession()),\n});\n\n//STUDYME: This was the initial implementation before reselect\n//Reselect is a library for memoization so as to cache the output\n//here in order not to fire mapStateToProps each time the App is re-rendered\n//even if it has not been directly triggered\n// const mapStateToProps = ({ user }) => ({\n//   currentUser: user.currentUser//we get access to this.props.currrentUser after putting into connect below\n// });\n\n//No need for mapDispatchToProps for setting current user as our Saga is now handling our setCurrent user\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n//connect has two arguments\n//mapDispatchToProps is the second argument\n//we have put the first argument to null as we dont need\n//mapStateToProps in Appjs as there is no where in here\n//that we have used the state of the current user\n//hence what we only need here is to send the update of the state\n//to the 'user.actions.js'\n//we dont need the constructor anymore, hence we have remove it!\n//UPDATE: Initially we had null as the first argument in connect()\n//but since we have implemented React Router Redirect to have\n//the app remove the signIn page after use signs in we have\n//therefore needed state in the Appjs file there the\n//mapStateToProp function and implementation.\n"]},"metadata":{},"sourceType":"module"}